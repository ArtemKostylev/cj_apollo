[{"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journal.js":"1","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/use-auth.js":"2","/home/shkri/Documents/GDMSH/cj-apollo/src/components/App.js":"3","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Login.js":"4","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Subgroups.js":"5","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Consult.js":"6","/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableDateCell.js":"7","/home/shkri/Documents/GDMSH/cj-apollo/src/components/TableControls.js":"8","/home/shkri/Documents/GDMSH/cj-apollo/src/reportWebVitals.js":"9","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Header.js":"10","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journals.js":"11","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/utils.js":"12","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Controls.js":"13","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Notes.js":"14","/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableCell.js":"15","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/constants.js":"16","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Compensation.js":"17","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Menu.js":"18","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/mutations.js":"19","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/queries.js":"20","/home/shkri/Documents/GDMSH/cj-apollo/src/components/ErrorScreen.js":"21","/home/shkri/Documents/GDMSH/cj-apollo/src/index.js":"22","/home/shkri/Documents/GDMSH/cj-apollo/src/components/DataPage.js":"23"},{"size":19193,"mtime":1620375715391,"results":"24","hashOfConfig":"25"},{"size":1133,"mtime":1617199912658,"results":"26","hashOfConfig":"25"},{"size":2667,"mtime":1620203361325,"results":"27","hashOfConfig":"25"},{"size":2124,"mtime":1619624157232,"results":"28","hashOfConfig":"25"},{"size":3591,"mtime":1620034509180,"results":"29","hashOfConfig":"25"},{"size":6202,"mtime":1620375670811,"results":"30","hashOfConfig":"25"},{"size":1277,"mtime":1620032041104,"results":"31","hashOfConfig":"25"},{"size":3714,"mtime":1619626990165,"results":"32","hashOfConfig":"25"},{"size":362,"mtime":1612134626885,"results":"33","hashOfConfig":"25"},{"size":714,"mtime":1619864926730,"results":"34","hashOfConfig":"25"},{"size":4992,"mtime":1620042829734,"results":"35","hashOfConfig":"25"},{"size":833,"mtime":1617116634728,"results":"36","hashOfConfig":"25"},{"size":3559,"mtime":1616937776077,"results":"37","hashOfConfig":"25"},{"size":3417,"mtime":1620035587764,"results":"38","hashOfConfig":"25"},{"size":1857,"mtime":1619726312288,"results":"39","hashOfConfig":"25"},{"size":1927,"mtime":1619625952634,"results":"40","hashOfConfig":"25"},{"size":5638,"mtime":1620026104537,"results":"41","hashOfConfig":"25"},{"size":1821,"mtime":1620203480296,"results":"42","hashOfConfig":"25"},{"size":1379,"mtime":1619693509539,"results":"43","hashOfConfig":"25"},{"size":2758,"mtime":1617443308728,"results":"44","hashOfConfig":"25"},{"size":159,"mtime":1617445235152,"results":"45","hashOfConfig":"25"},{"size":1423,"mtime":1620451593152,"results":"46","hashOfConfig":"25"},{"size":4815,"mtime":1620208337172,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"1vjoe1e",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"80"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"51"},"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journal.js",["110","111","112","113","114"],"//TODO create table component\n\n//table library url https://react-table.tanstack.com/docs/examples/editable-studentData\nimport React, { useEffect, useState } from \"react\";\nimport \"../styles/Journal.css\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport moment from \"moment\";\nimport \"moment/locale/ru\";\nimport { EditableCell } from \"./EditableCell\";\nimport { TableControls } from \"./TableControls\";\nimport { useMutation, useQuery, NetworkStatus, useApolloClient } from \"@apollo/client\";\nimport { FETCH_JOURNAL_QUERY } from \"../scripts/queries\";\nimport { useAuth } from \"../scripts/use-auth\";\nimport {\n  UPDATE_JOURNAL_MUTATION,\n} from \"../scripts/mutations\";\nimport { PROGRAMS, GROUP_PERIODS, QUATER_END, QUATERS_RU } from \"../scripts/constants\";\nimport { EditableDateCell } from \"./EditableDateCell\";\nimport { useHistory } from \"react-router-dom\";\nimport { Prompt } from 'react-router';\n\nexport default function Journal(props) {\n  moment.locale(\"ru\");\n\n  let auth = useAuth();\n  let history = useHistory();\n  let client = useApolloClient();\n\n  const [month, setMonth] = React.useState(moment().month());\n  const [course, setCourse] = useState(0);\n  let changed = false;\n\n  const [period, setPeriod] = useState(\n    month > 8 ? GROUP_PERIODS[\"first_half\"] : GROUP_PERIODS[\"second_half\"]\n  );\n\n  const listener = (event) => {\n    if (changed) {\n      event.preventDefault();\n      let confirm = window.confirm(\"Вы действительно хотите покинуть страницу? Все несохраненные изменения будут потеряны.\")\n      if (!confirm) event.stopImmediatePropagation();\n    }\n  }\n\n  useEffect(() => {\n    props.menuRef?.current.addEventListener('click', listener)\n\n    return () => { props.menuRef?.current?.removeEventListener('click', listener) }\n  })\n\n  const startDate = moment().month(month);\n\n  const parsedDates = createDates(startDate);\n\n  const updateMyData = (row, column, value, group) => {\n    let date = \"\";\n    console.log(group);\n    if (group > -1) {\n      date = dates_by_group[group][column].date;\n      if (date === \"\") {\n        alert(\"Пожалуйста, заполните дату\");\n        return false;\n      }\n\n    } else {\n      date = parsedDates[column].format(\"YYYY-MM-DD\");\n    }\n    const student = studentData.find((item) => item.student.id === row);\n    const marks = student.journalEntry;\n    const cell = marks.find((el) => el.date.split(\"T\")[0] === date);\n\n    const studentId = studentData.indexOf(student);\n\n    if (cell === undefined) {\n      studentData = [\n        ...studentData.slice(0, studentId),\n        {\n          ...studentData[studentId],\n          journalEntry: [\n            ...studentData[studentId].journalEntry,\n            {\n              id: 0,\n              mark: value,\n              date: date.concat(\"T00:00:00.000Z\"),\n              delete_flag: false,\n              update_flag: true,\n            },\n          ],\n        },\n        ...studentData.slice(studentId + 1),\n      ];\n    } else {\n      let index = marks.indexOf(cell);\n      let flag = value === \"\";\n      studentData = [\n        ...studentData.slice(0, studentId),\n        {\n          ...studentData[studentId],\n          journalEntry: [\n            ...studentData[studentId].journalEntry.slice(0, index),\n            {\n              ...studentData[studentId].journalEntry[index],\n              mark: value,\n              delete_flag: flag,\n              update_flag: !flag,\n            },\n            ...studentData[studentId].journalEntry.slice(index + 1),\n          ],\n        },\n        ...studentData.slice(studentId + 1),\n      ];\n    }\n    changed = true;\n    console.log(studentData, value);\n    return true;\n  };\n\n  const updateQuaterData = (row, column, value, group) => {\n    const student = studentData.find((item, index) => item.student.id === row);\n    const studentIndex = studentData.indexOf(student);\n    var mark = student.quaterMark.find((item) => item.period === column);\n    if (!mark) {\n      const newMark = {\n        id: 0,\n        mark: value,\n        period: column,\n        studentId: student.id,\n        teacherId: auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        update_flag: true,\n      };\n      studentData[studentIndex].quaterMark = [\n        ...studentData[studentIndex].quaterMark,\n        newMark,\n      ];\n      return true;\n    }\n    const markIndex = student.quaterMark.indexOf(mark);\n    let flag = value === \"\";\n    studentData = [\n      ...studentData.slice(0, studentIndex),\n      {\n        ...studentData[studentIndex],\n        quaterMark: [\n          ...studentData[studentIndex].quaterMark.slice(0, markIndex),\n          {\n            ...studentData[studentIndex].quaterMark[markIndex],\n            mark: value,\n            delete_flag: flag,\n            update_flag: !flag,\n          },\n          ...studentData[studentIndex].quaterMark.slice(markIndex + 1),\n        ],\n      },\n      ...studentData.slice(studentIndex + 1),\n    ];\n    return true;\n  };\n\n  const createUpdateData = () => {\n    let result = [];\n\n    for (let i = 0; i < studentData.length; i++) {\n      let student = studentData[i].journalEntry;\n      for (let j = 0; j < student.length; j++) {\n        let entry = student[j];\n        if (entry.update_flag)\n          result.push({\n            id: entry.id,\n            mark: entry.mark,\n            date: entry.date,\n            relationId: studentData[i].id,\n          });\n      }\n    }\n\n    return result;\n  };\n\n  const createClearData = () => {\n    let result = [];\n    for (let i = 0; i < studentData.length; i++) {\n      let student = studentData[i].journalEntry;\n      for (let j = 0; j < student.length; j++) {\n        let entry = student[j];\n        if (entry.delete_flag && entry.id !== 0) result.push(entry.id);\n      }\n    }\n    return result;\n  };\n\n  const createQuaterData = () => {\n    let result = [];\n    studentData.forEach((student) => {\n      student.quaterMark.forEach((mark) => {\n        if (mark.update_flag)\n          result.push({\n            id: mark.id,\n            mark: mark.mark,\n            period: mark.period,\n            relationId: student.id,\n          });\n      });\n    });\n    return result;\n  };\n\n  const createQuaterClearData = () => {\n    let result = [];\n    studentData.forEach((student) => {\n      student.quaterMark.forEach((mark) => {\n        if (mark.delete_flag && mark.id !== 0) result.push(mark.id);\n      });\n    });\n    return result;\n  };\n\n  var { loading, data: studentData, error, refetch, networkStatus } = useQuery(\n    FETCH_JOURNAL_QUERY,\n    {\n      variables: {\n        teacherId: props.id ? props.id : auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        date_gte: startDate\n          .clone()\n          .startOf(\"year\")\n          .utc()\n          .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n          .concat(\"Z\"),\n        date_lte: startDate\n          .clone()\n          .endOf(\"year\")\n          .utc()\n          .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n          .concat(\"Z\"),\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [update] = useMutation(UPDATE_JOURNAL_MUTATION);\n\n  const save = async () => {\n\n    await update({\n      variables: {\n        data: {\n          updateCasual: createUpdateData(),\n          updatePeriod: createQuaterData(),\n          deleteCasual: createClearData(),\n          deletePeriod: createQuaterClearData(),\n        }\n      }\n    });\n\n    refetch();\n  };\n\n  const spinner = <div>Загрузка</div>;\n\n  if (error) history.push(\"/error\");\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n  studentData = studentData.fetchJournal.map((student) => ({\n    ...student,\n    journalEntry: [\n      ...student.journalEntry.map((entry) => ({\n        ...entry,\n        delete_flag: false,\n        update_flag: false,\n      })),\n    ],\n  }));\n\n  let groupedData = [];\n\n  //TODO add subgroup tag\n  if (auth.user.courses[course].group) {\n    let pairs = [];\n    let classes = [];\n    let programs = [];\n    let subgroups = [];\n    studentData.forEach((item) => {\n      classes.push(item.student.class);\n      programs.push(item.student.program);\n      subgroups.push(item.subgroup ? item.subgroup : \"\");\n    });\n\n    classes = [...new Set(classes)];\n    programs = [...new Set(programs)];\n    subgroups = [...new Set(subgroups)];\n\n    classes.forEach((num) => {\n      programs.forEach((program) => {\n        subgroups.forEach((subgroup) => {\n          pairs.push({\n            class: num,\n            program: program,\n            subgroup: subgroup,\n            students: [],\n          });\n        });\n      });\n    });\n\n    studentData.forEach((item) => {\n      let pairIndex = pairs.findIndex(\n        (pair) =>\n          item.student.class === pair.class &&\n          item.student.program === pair.program &&\n          item.subgroup === pair.subgroup\n      );\n      pairs[pairIndex].students.push(item);\n    });\n\n    pairs.forEach((pair) => {\n      if (pair.students.length > 0) groupedData.push(pair);\n    });\n  }\n\n  //inside groupedData we divide them by subgroups\n\n  var dates_by_group = groupedData.map((group) => {\n    var month_id = period.data[0].id;\n    var dates = group.students.map((student) =>\n      student.journalEntry.map((entry) => entry.date)\n    );\n    var result = [];\n    const len = period.id === 0 ? 20 : 24;\n    if (dates[0].length === 0) {\n\n      var counter = 1;\n      for (var i = 0; i < len; i++) {\n        var border = month_id === 1 ? 4 : 5;\n        if (counter >= border) {\n          counter = 1;\n          result.push({ date: \"\", month: month_id });\n          month_id++;\n          continue;\n        }\n        result.push({ date: \"\", month: month_id });\n        counter++;\n      }\n      return result;\n    }\n\n    dates = [...new Set(dates.flat())].values();\n    var counter = 1;\n\n    var date = dates.next().value;\n    var month = parseInt(date.split(\"T\")[0].split(\"-\")[1]);\n    for (var i = 0; i < len; i++) {\n      var border = month_id === 1 ? 4 : 5;\n      if (counter < border && month === month_id) {\n        result.push({ date: date, month: month_id });\n        date = dates.next().value;\n        if (!date) {\n          month = 0;\n          continue;\n        }\n        month = parseInt(date.split(\"T\")[0].split(\"-\")[1]);\n        counter++;\n        continue;\n      }\n      if (counter < border && month !== month_id) {\n        counter++;\n        result.push({ date: \"\", month: month_id });\n        continue;\n      }\n      if (counter >= border && month !== month_id) {\n        counter = 1;\n        result.push({ date: \"\", month: month_id });\n        month_id++;\n        continue;\n      }\n      if (counter >= border) {\n        counter = 1;\n        result.push({ date: date, month: month_id });\n        date = dates.next().value;\n        if (!date) {\n          month = 0;\n          continue;\n        }\n        month = parseInt(date.split(\"T\")[0].split(\"-\")[1]);\n        month_id++;\n      }\n    }\n    return result;\n  });\n\n  const updateDates = (input, index, group) => {\n    var date = input.toLocaleDateString(\"ru-RU\");\n    date = date.split(\".\");\n    date = `${date[2]}-${date[1]}-${date[0]}`;\n    dates_by_group[group][index].date = date.concat(\"T00:00:00.000Z\");\n  };\n\n  const prepareQuaters = () => {\n    if (period.id === 0) {\n      return [\"first\", \"second\"];\n    } else return [\"third\", \"fourth\", \"year\"];\n  };\n\n  const GroupContent = () => (\n    <>\n      <TableControls\n        initialMonth={startDate.month()}\n        setMonth={setMonth}\n        save={save}\n        courses={auth.user.courses}\n        course={course}\n        setCourse={setCourse}\n        setPeriod={setPeriod}\n        period={period}\n      />\n      <table className=\"journal_table\">\n        <tbody>\n          {dates_by_group.map((group, g_index) => {\n            console.log(g_index);\n            return (\n              <>\n                <tr className=\"group_row\">\n                  <th colSpan={period.id === 0 ? \"23\" : \"28\"}>\n                    <div>\n                      <p>{`Класс:  ${groupedData[g_index].class}${PROGRAMS[`${groupedData[g_index].program}`]\n                        }`}</p>\n                      <p>{`Группа: ${groupedData[g_index].subgroup}`}</p>\n                    </div>\n                  </th>\n                </tr>\n                <tr>\n                  <th className=\"name_column\" rowSpan=\"2\">\n                    Имя ученика\n                  </th>\n                  {period.data.map((month) => (\n                    <th colSpan={month.id === 1 ? \"4\" : \"5\"}>{month.name}</th>\n                  ))}\n                  <th rowSpan=\"2\" className=\"quater_column\">\n                    {period.id === 0 ? \"I четверть\" : \"II четверть\"}\n                  </th>\n                  <th rowSpan=\"2\" className=\"quater_column\">\n                    {period.id === 0 ? \"III четверть\" : \"IV четверть\"}\n                  </th>\n                  {/*                   <th rowSpan=\"2\">\n                    {period.id === 0 ? \"1-е полугодие\" : \"2-е полугодие\"}\n                  </th> */}\n                  {period.id === 1 ? (\n                    <th rowSpan=\"2\" className=\"quater_column\">\n                      Годовая оценка\n                    </th>\n                  ) : (\n                    \"\"\n                  )}\n                </tr>\n\n                <tr>\n                  {group.map((date, id) => {\n                    return (\n                      <th className=\"date\">\n                        <EditableDateCell\n                          initialValue={\n                            date.date === \"\"\n                              ? \"\"\n                              : new Date(date.date.split(\"T\")[0])\n                          }\n                          column={id}\n                          month={date.month}\n                          group={g_index}\n                          updateDates={updateDates}\n                          full={false}\n                        />\n                      </th>\n                    );\n                  })}\n                </tr>\n                {groupedData[g_index].students.map((item) => (\n                  <tr>\n                    <td className=\"name_cell\">{`${item.student.surname} ${item.student.name}`}</td>\n                    {group.map((date, index) => (\n                      <EditableCell\n                        value={findMark(date.date, item.journalEntry)}\n                        row={item.student.id}\n                        column={index}\n                        updateMyData={updateMyData}\n                        weekend={\"\"}\n                        group={g_index}\n                      />\n                    ))}\n                    {prepareQuaters().map((quat) => {\n                      var mark = \"\";\n                      try {\n                        mark = item.quaterMark.find(\n                          (mark) => mark.period === quat\n                        );\n                      } catch {\n                        mark = \"\";\n                      }\n\n                      return (\n                        <EditableCell\n                          value={mark ? mark.mark : \"\"}\n                          row={item.student.id ? item.student.id : \"\"}\n                          column={quat}\n                          updateMyData={updateQuaterData}\n                          weekend={\"\"}\n                          group={g_index}\n                        />\n                      );\n                    })}\n                  </tr>\n                ))}\n              </>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n\n  if (auth.user.courses[course].group) return <GroupContent />;\n\n  const getQuaterMark = (item) => {\n    if (QUATER_END[month]) {\n      const mark = item.quaterMark.find(\n        (mark) => mark.period === QUATER_END[month]\n      );\n      const year = month === 4 ? item.quaterMark.find(\n        (mark) => mark.period === 'year'\n      ) : null;\n\n\n      return (\n        <>\n          <EditableCell\n            value={mark ? mark.mark : \"\"}\n            row={item.student.id}\n            column={mark ? mark.period : QUATER_END[month]}\n            updateMyData={updateQuaterData}\n          />\n          {year !== null ? <EditableCell\n            value={year ? year.mark : \"\"}\n            row={item.student.id}\n            column={year ? year.period : \"year\"}\n            updateMyData={updateQuaterData}\n          /> : \"\"}\n        </>\n      );\n    }\n    return \"\";\n  };\n\n  const IndividualContent = () => (\n    <>\n      <TableControls\n        initialMonth={startDate.month()}\n        setMonth={setMonth}\n        save={save}\n        courses={auth.user.courses}\n        course={course}\n        setCourse={setCourse}\n      />\n      <table className=\"journal_table\">\n        <thead>\n          <tr>\n            <th className=\"name_column\" rowSpan=\"2\">\n              Имя ученика\n            </th>\n            <th rowSpan=\"2\">Класс</th>\n            {parsedDates.map((date) => (\n              <th>{date.format(\"DD.MM\")}</th>\n            ))}\n            {[2, 4, 9, 11].includes(month) ? (\n              <th rowSpan=\"2\" className=\"quater_column\">\n                {`${QUATERS_RU[[9, 11, 2, 4].indexOf(month)]}`}\n              </th>\n            ) : (\n              \"\"\n            )}\n            {month === 4 ? (\n              <th rowSpan=\"2\" className=\"quater_column\">\n                {`Год`}\n              </th>\n            ) : (\n              \"\"\n            )}\n          </tr>\n          <tr>\n            {parsedDates.map((date) => (\n              <th>{moment.weekdaysMin(date.isoWeekday())}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {studentData.map((item) => (\n            <tr>\n              <td className=\"name_cell\">{`${item.student.surname} ${item.student.name}`}</td>\n              <td className=\"name_cell\">{`${item.student.class}${PROGRAMS[`${item.student.program}`]\n                }`}</td>\n              {parsedDates.map((date, index) => (\n                <EditableCell\n                  value={findMark(date, item.journalEntry)}\n                  row={item.student.id}\n                  column={index}\n                  updateMyData={updateMyData}\n                  weekend={date.isoWeekday() === 6 ? \"weekend\" : \"\"}\n                />\n              ))}\n              {getQuaterMark(item)}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n\n  return <IndividualContent />;\n}\n\nconst createDates = (initialDate) => {\n  let result = [];\n  let start = initialDate.clone().startOf(\"month\");\n  let end = initialDate.clone().endOf(\"month\");\n\n  for (let date = start; date <= end; date.add(1, \"day\")) {\n    if (date.isoWeekday() !== 7) result.push(date.clone());\n  }\n  return result;\n};\n\nconst findMark = (date, student) => {\n  console.log(date);\n  if (date === \"\" || !date) return \"\";\n  if (typeof date === \"string\") date = date.split(\"T\")[0];\n  else date = date.format(\"YYYY-MM-DD\");\n  const mark = student.find((el) => el.date.split(\"T\")[0] === date);\n  return mark !== undefined ? mark.mark : \"\";\n};\n",["115","116"],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/use-auth.js",[],["117","118"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/App.js",["119","120","121"],"import React, { useCallback, useRef, useState } from \"react\";\nimport \"../styles/App.css\";\nimport Menu from \"./Menu\";\nimport Header from \"./Header\";\nimport Journal from \"./Journal\";\nimport Compensation from \"./Compensation\";\nimport Login from \"./Login\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../scripts/use-auth.js\";\nimport Journals from \"./Journals\";\nimport DataPage from \"./DataPage\";\nimport { Notes } from \"./Notes\";\nimport { Consult } from \"./Consult\";\nimport { Subgroups } from \"./Subgroups\";\nimport { ErrorScreen } from \"./ErrorScreen\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport default function App() {\n  const auth = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        <Login />\n      </Route>\n      <Route path=\"/error\" component={ErrorScreen} />\n      <Route\n        path=\"/\"\n        render={({ location }) =>\n          auth.user ? <Content /> : <Redirect to=\"/login\" />\n        }\n      />\n    </Switch>\n  );\n}\n\nconst Content = () => {\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [changed, setChanged] = useState(false);\n  const auth = useAuth();\n  const menuRef = useRef();\n\n  const menuClick = (event) => {\n    setMenuVisible((prev) => !prev)\n  }\n\n  const adminBoard = (\n    <Switch>\n      <Route path=\"/journals\" component={Journals} />\n      <Route path=\"/data\" component={DataPage} />\n      <Redirect from=\"/\" to=\"/journals\" />\n    </Switch>\n  );\n\n  const userBoard = (\n    <Switch>\n      <Route path=\"/journal\" render={(props) => (<Journal {...props} menuRef={menuRef} />)} />\n      <Route path=\"/compensation\" render={(props) => (<Compensation {...props} menuRef={menuRef} />)} />\n      <Route path=\"/notes\" render={(props) => (<Notes {...props} menuRef={menuRef} />)} />\n      <Route path=\"/consult\" render={(props) => (<Consult {...props} menuRef={menuRef} />)} />\n      <Route path=\"/subgroups\" render={(props) => (<Subgroups {...props} menuRef={menuRef} />)} />\n      <Redirect from=\"/\" to=\"/journal\" />\n    </Switch>\n  );\n\n  return (\n    <div className=\"App\">\n      <ErrorBoundary FallbackComponent={ErrorScreen}>\n        <Menu\n          visible={menuVisible}\n          close={() => setMenuVisible((prev) => !prev)}\n        ></Menu>\n        <div\n          className={`Cover ${menuVisible ? \"menuVisible\" : \"\"}`}\n          onClick={() => setMenuVisible((prev) => !prev)}\n        />\n        <div className={`Content ${menuVisible ? \"menuVisible\" : \"\"}`}>\n          <Header menuClick={menuClick} menuRef={menuRef}></Header>\n          {auth.user.roleId === 1 ? adminBoard : userBoard}\n        </div>\n      </ErrorBoundary>\n    </div>\n  );\n};\n",["122","123"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Login.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Subgroups.js",["124"],"import { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { PROGRAMS } from \"../scripts/constants\";\nimport { UPDATE_SUBGROUPS_MUTATION } from \"../scripts/mutations\";\nimport { FETCH_SUBGROUPS_QUERY } from \"../scripts/queries\";\nimport { useAuth } from \"../scripts/use-auth\";\nimport \"../styles/Subgroups.css\";\n\nimport Controls from \"./Controls\";\n\nexport const Subgroups = () => {\n  const auth = useAuth();\n\n  const availableCourses = auth.user.courses.filter((course) => course.group);\n\n  const [course, setCourse] = useState(0);\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n  };\n\n  var { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_SUBGROUPS_QUERY,\n    {\n      variables: {\n        courseId: availableCourses[course].id,\n        teacherId: auth.user.teacher,\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [update] = useMutation(UPDATE_SUBGROUPS_MUTATION);\n\n  const save = () => {\n    const result = [];\n    data.forEach((group) => {\n      group.relations.forEach((item) => {\n        result.push({\n          id: item.id,\n          subgroup: item.subgroup,\n        });\n      });\n    });\n    update({\n      variables: {\n        data: result,\n      },\n    });\n    refetch();\n  };\n\n  const items = [\n    {\n      type: \"dropdown\",\n      data: availableCourses.map((course) => course.name),\n      label: \"Предмет :\",\n      text: availableCourses[course].name,\n      onClick: getCourse,\n    },\n    {\n      type: \"button\",\n      text: \"Сохранить\",\n      onClick: save,\n    },\n  ];\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  data = data.fetchSubgroups;\n\n  const updateData = (value, id, group) => {\n    const studentIndex = data[group].relations.findIndex(\n      (student) => student.student.id === id\n    );\n    data = [\n      ...data.slice(0, group),\n      {\n        ...data[group],\n        relations: [\n          ...data[group].relations.slice(0, studentIndex),\n          {\n            ...data[group].relations[studentIndex],\n            subgroup: parseInt(value),\n          },\n          ...data[group].relations.slice(studentIndex + 1),\n        ],\n      },\n      ...data.slice(group + 1),\n    ];\n  };\n\n  const Item = (props) => {\n    const [value, setValue] = useState(props.subgroup);\n\n    const onChange = (e) => {\n      setValue(e.target.value);\n      if (e.target.value.length > 0)\n        props.updateData(e.target.value, props.id, props.group);\n    };\n\n    return (\n      <li className=\"item\">\n        <p>{`${props.surname} ${props.name}`}</p>\n        <label> Группа:</label>\n        <input value={value} onChange={onChange} maxlength=\"1\" />\n      </li>\n    );\n  };\n\n  return (\n    <div>\n      <Controls items={items} />\n      <div className=\"group_wrapper\">\n        <ul className=\"group_list\">\n          {data.map((group, index) => (\n            <>\n              <li className=\"group_header\">{`Класс: ${group.class}${PROGRAMS[group.program]}`}</li>\n              {group.relations.map((item) => (\n                <Item\n                  name={item.student.name}\n                  surname={item.student.surname}\n                  subgroup={item.subgroup}\n                  group={index}\n                  id={item.student.id}\n                  updateData={updateData}\n                />\n              ))}\n            </>\n          ))}\n        </ul>\n      </div>\n\n    </div>\n  );\n};\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Consult.js",["125","126","127"],"import moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { PERIODS, QUATERS_RU } from \"../scripts/constants\";\nimport { useAuth } from \"../scripts/use-auth\";\nimport { getQuater } from \"../scripts/utils\";\nimport Controls from \"./Controls\";\nimport { EditableDateCell } from \"./EditableDateCell\";\nimport {\n  DELETE_CONSULTS_MUTATION,\n  UPDATE_CONSULTS_MUTATION,\n} from \"../scripts/mutations\";\n\nimport { FETCH_CONSULTS_QUERY } from \"../scripts/queries\";\nimport \"../styles/Consult.css\";\nimport { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\n\nexport const Consult = (props) => {\n  const auth = useAuth();\n\n  \n\n  const [year, setYear] = useState(2021);\n  const [period, setPeriod] = useState(getQuater(moment().month()));\n  const [course, setCourse] = useState(0);\n\n  var changed = false;\n\n  const listener = (event) => {\n    if (changed) {\n      event.preventDefault();\n      let confirm = window.confirm(\"Вы действительно хотите покинуть страницу? Все несохраненные изменения будут потеряны.\")\n      if (!confirm) event.stopImmediatePropagation();\n    }\n  }\n\n  useEffect(() => {\n    props.menuRef?.current.addEventListener('click', listener)\n\n    return () => { props.menuRef?.current?.removeEventListener('click', listener) }\n  })\n\n  const getYear = (e) => {\n    setYear(e.target.value);\n    refetch();\n  };\n\n  const getPeriod = (e) => {\n    setPeriod(e.target.getAttribute(\"data-index\"));\n    refetch();\n  };\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n    refetch();\n  };\n\n  let { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_CONSULTS_QUERY,\n    {\n      variables: {\n        teacherId: props.id ? props.id : auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        period: PERIODS[period],\n        year: parseInt(year),\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [update] = useMutation(UPDATE_CONSULTS_MUTATION);\n  const [clear] = useMutation(DELETE_CONSULTS_MUTATION);\n\n  const updateDates = (value, index, row) => {\n    const student = data.find((item, index) => item.student.id === row);\n    const studentIndex = data.indexOf(student);\n    var date = student.consult.find((item) => item.id === index);\n    const dateIndex = student.consult.indexOf(date);\n    changed = true;\n    value = value.toLocaleDateString(\"ru-RU\").split(\".\");\n\n    if (!date) {\n      const newConsult = {\n        id: !date ? 0 : date.id,\n        date: `${value[2]}-${value[1]}-${value[0]}`.concat(\"T00:00:00.000Z\"),\n        period: PERIODS[period],\n        year: parseInt(year),\n        update_flag: true,\n        delete_flag: false,\n      };\n      data = [\n        ...data.slice(0, studentIndex),\n        {\n          ...data[studentIndex],\n          consult: [...data[studentIndex].consult, newConsult],\n        },\n        ...data.slice(studentIndex + 1),\n      ];\n      return;\n    }\n    let flag = value === \"\";\n    data = [\n      ...data.slice(0, studentIndex),\n      {\n        ...data[studentIndex],\n        consult: [\n          ...data[studentIndex].consult.slice(0, dateIndex),\n          {\n            ...data[studentIndex].consult[dateIndex],\n            date: `${value[2]}-${value[1]}-${value[0]}`.concat(\"T00:00:00.000Z\"),\n            delete_flag: flag,\n            update_flag: !flag,\n          },\n          ...data[studentIndex].consult.slice(dateIndex + 1),\n        ],\n      },\n      ...data.slice(studentIndex + 1),\n    ];\n    console.log(data);\n    \n  };\n\n  const createUpdateData = () => {\n    let result = [];\n    data.forEach((student) => {\n      student.consult.forEach((date) => {\n        if (date.update_flag)\n          result.push({\n            id: date.id,\n            date: date.date,\n            period: 'fourth',\n            year: 2021,\n            relationId: student.id,\n          });\n      });\n    });\n    return result;\n  };\n\n  const createClearData = () => {\n    let result = [];\n    data.forEach((student) => {\n      student.consult.forEach((date) => {\n        if (date.delete_flag && date.id !== 0) result.push(date.id);\n      });\n    });\n    return result;\n  };\n\n  const save = async (e) => {\n\n    await update({\n      variables: {\n        data: createUpdateData(),\n      },\n    });\n\n    await clear({\n      variables: {\n        ids: createClearData(),\n      },\n    });\n    refetch();\n  };\n\n  const items = [\n    {\n      type: \"dropdown\",\n      data: auth.user.courses.map((course) => course.name),\n      label: \"Предмет :\",\n      text: auth.user.courses[course].name,\n      onClick: getCourse,\n    },\n    {\n      type: \"button\",\n      text: \"Сохранить\",\n      onClick: save,\n    },\n  ];\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n  if (error) {\n\n  }\n\n  data = data.fetchConsults;\n\n  return (\n    <div className=\"consult_container\">\n      <Controls items={items} />\n      <table className=\"consult_table\">\n        <thead>\n          <tr>\n            <th className=\"name_column\">Имя ученика</th>\n            <th className=\"date_columns\" colSpan=\"5\">\n              Даты\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item) => (\n            <tr>\n              <td className=\"name_cell\">\n                {`${item.student.surname} ${item.student.name}`}\n              </td>\n              {Array(5)\n                .fill(1)\n                .map((num, index) => (\n                  <td>\n                    <EditableDateCell\n                      initialValue={\n                        item.consult[index]\n                          ? new Date(item.consult[index].date.split(\"T\")[0])\n                          : \"\"\n                      }\n                      column={item.consult[index]?.id ? item.consult[index]?.id : 0}\n                      group={item.student.id}\n                      updateDates={updateDates}\n                    />\n                  </td>\n                ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableDateCell.js",["128","129"],"import React, { forwardRef, useEffect, useState } from \"react\";\nimport { GROUP_PERIODS } from \"../scripts/constants\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"../styles/Journal.css\";\nimport ru from \"date-fns/locale/ru\";\nimport moment from \"moment\";\n\nexport const EditableDateCell = ({\n  initialValue,\n  updateDates,\n  column,\n  group,\n  month,\n  row,\n  full = true,\n}) => {\n  const [value, setValue] = useState(initialValue);\n\n  const Input = forwardRef(({ value, onClick }, ref) => (\n    <p\n      onClick={onClick}\n      ref={ref}\n      style={{ padding: \"0\", cursor: \"pointer\", margin: \"0\" }}\n    >\n      {value ? `${value.split(\"/\")[1]}.${value.split(\"/\")[0]}${full ? \".\" + value.split(\"/\")[2] : \"\"}` : \".....\"}\n    </p>\n  ));\n\n  const start_date = moment()\n    .clone()\n    .month(month - 1)\n    .startOf(\"month\")\n    .toDate();\n  const end_date = moment()\n    .clone()\n    .month(month - 1)\n    .endOf(\"month\")\n    .toDate();\n  return (\n    <DatePicker\n      selected={value}\n      onChange={(date) => {\n        updateDates(date, column, group, row ? row : 0);\n        setValue(date);\n      }}\n      customInput={<Input />}\n      minDate={start_date}\n      maxDate={end_date}\n      locale={ru}\n    />\n  );\n};\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/TableControls.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/reportWebVitals.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Header.js",[],["130","131"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journals.js",["132","133","134","135"],"import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { FETCH_JOURNAL_QUERY, FETCH_TEACHERS_QUERY } from \"../scripts/queries\";\nimport \"../styles/Teachers.css\";\nimport moment from \"moment\";\nimport { QUATERS, QUATERS_RU } from \"../scripts/constants\";\nimport { getQuater } from \"../scripts/utils\";\nimport Controls from \"./Controls\";\n\nexport default function Teachers(props) {\n  const [teacherIndex, setTeacherIndex] = useState(1);\n  const [period, setPeriod] = useState(getQuater(moment().month()));\n  const [year, setYear] = useState(moment().year());\n  const [course, setCourse] = useState(0);\n\n  const spinner = <div>Загрузка</div>;\n\n  const { loading: tcLoading, data: teachers } = useQuery(FETCH_TEACHERS_QUERY);\n\n  if (tcLoading) return spinner;\n\n  const ListItem = (props) => {\n    return (\n      <li tabIndex=\"0\" onClick={() => setTeacherIndex(props.index)}>\n        <p>{props.name}</p>\n      </li>\n    );\n  };\n\n  const extrudeDate = (date) => {\n    const [month, day] = date.split(\"T\")[0].split(\"-\").slice(1);\n    return `${day}/${month}`;\n  };\n\n  const StudentItem = (props) => {\n    const cells = Array(props.cells)\n      .fill()\n      .map((x, i) => i);\n    return (\n      <div className=\"teacher_item\">\n        <div className=\"item_header\">\n          <p>{props.name}</p>\n          <p>{props.hours}</p>\n        </div>\n        <div className=\"item_data\">\n          <table>\n            <thead>\n              <tr>\n                {cells.map((cell) => (\n                  <th key={cell}>\n                    {props.dates[cell] ? extrudeDate(props.dates[cell]) : \"...\"}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {cells.map((cell) => (\n                  <td key={cell}>\n                    {props.marks[cell] ? props.marks[cell] : \" \"}\n                  </td>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  const TeacherJournal = (props) => {\n    const { loading, data: journal, error, refetch, networkStatus } = useQuery(\n      FETCH_JOURNAL_QUERY,\n      {\n        variables: {\n          courseId: props.courseId,\n          teacherId: props.teacherIndex,\n          date_gte: moment()\n            .month(QUATERS[props.period][0])\n            .year(props.year)\n            .startOf(\"month\")\n            .utc()\n            .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n            .concat(\"Z\"),\n          date_lte: moment()\n            .month(QUATERS[props.period].slice(-1)[0])\n            .year(props.year)\n            .endOf(\"month\")\n            .utc()\n            .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n            .concat(\"Z\"),\n        },\n        fetchPolicy: \"network-only\",\n      }\n    );\n\n    if (loading) return spinner;\n\n    return journal.fetchJournal.map((item) => {\n      const name = `${item.student.name} ${item.student.surname}`;\n      const hours = `${item.journalEntry.length}`;\n      const dates = item.journalEntry.map((entry) => entry.date);\n      const marks = item.journalEntry.map((entry) => entry.mark);\n      return (\n        <StudentItem\n          name={name}\n          hours={hours}\n          dates={dates}\n          marks={marks}\n          cells={15}\n          key={name}\n        />\n      );\n    });\n  };\n\n  const getYear = (e) => {\n    setYear(e.target.value);\n  };\n\n  const getPeriod = (e) => {\n    setPeriod(e.target.getAttribute(\"data-index\"));\n  };\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n  };\n\n  const items = [\n    {\n      type: \"input\",\n      label: \"Год :\",\n      text: year,\n      onClick: getYear,\n    },\n    {\n      type: \"dropdown\",\n      data: QUATERS_RU,\n      label: \"Период :\",\n      text: QUATERS_RU[period],\n      onClick: getPeriod,\n    },\n    {\n      type: \"dropdown\",\n      data: teachers.fetchTeachers\n        .find((teacher) => teacher.id === teacherIndex)\n        .relations.map((item) => item.course.name),\n      label: \"Предмет :\",\n      text: teachers.fetchTeachers.find(\n        (teacher) => teacher.id === teacherIndex\n      ).relations[course].course.name,\n      onClick: getCourse,\n    },\n  ];\n\n  return (\n    <div className=\"page\">\n      <div className=\"block_left\">\n        <ul>\n          {teachers.fetchTeachers.map((teacher) => (\n            <ListItem\n              name={`${teacher.name} ${teacher.surname}`}\n              index={teacher.id}\n              key={teacher.id}\n            />\n          ))}\n        </ul>\n      </div>\n      <div className=\"block_right\">\n        <Controls items={items} />\n        <TeacherJournal\n          teacherIndex={teacherIndex}\n          period={period}\n          year={year}\n          key={teacherIndex}\n          courseId={\n            teachers.fetchTeachers.find(\n              (teacher) => teacher.id === teacherIndex\n            ).relations[course].course.id\n          }\n        />\n      </div>\n    </div>\n  );\n}\n",["136","137"],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/utils.js",["138"],"import React, { useEffect } from \"react\";\nimport { QUATERS } from \"./constants\";\n\nexport function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n\nexport function getQuater(month) {\n  let quater = null;\n  QUATERS.forEach((item, index) => {\n    if (item.includes(month)) quater = index;\n  });\n\n  return !quater ? 3 : quater;\n}\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Controls.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Notes.js",["139","140","141","142"],"import { useAuth } from \"../scripts/use-auth\";\nimport { PERIODS, QUATERS_RU } from \"../scripts/constants\";\n\nimport \"../styles/Notes.css\";\nimport Controls from \"./Controls\";\nimport { useEffect, useState } from \"react\";\nimport { getQuater } from \"../scripts/utils\";\nimport moment from \"moment\";\nimport { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\nimport { FETCH_NOTES_QUERY } from \"../scripts/queries\";\nimport { UPDATE_NOTE_MUTATION } from \"../scripts/mutations\";\n\nexport const Notes = (props) => {\n  const auth = useAuth();\n\n\n\n  const listener = (event) => {\n    if (changed) {\n      event.preventDefault();\n      let confirm = window.confirm(\"Вы действительно хотите покинуть страницу? Все несохраненные изменения будут потеряны.\")\n      !confirm ? event.stopImmediatePropagation() : setChanged(false);\n    }\n  }\n\n  useEffect(() => {\n    props.menuRef?.current.addEventListener('click', listener)\n\n    return () => { props.menuRef?.current?.removeEventListener('click', listener) }\n  })\n\n  const [year, setYear] = useState(2021);\n  const [period, setPeriod] = useState(getQuater(moment().month()));\n  const [course, setCourse] = useState(0);\n  const [changed, setChanged] = useState(false);\n\n  const getYear = (e) => {\n    setYear(e.target.value);\n    setValue(\"\");\n    refetch();\n  };\n\n  const getPeriod = (e) => {\n    setPeriod(e.target.getAttribute(\"data-index\"));\n    setValue(\"\");\n    refetch();\n  };\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n    setValue(\"\");\n    refetch();\n  };\n\n  const [update] = useMutation(UPDATE_NOTE_MUTATION);\n\n  const save = async (e) => {\n    await update({\n      variables: {\n        data: {\n          id: data.fetchNotes ? data.fetchNotes.id : 0,\n          text: value,\n          period: PERIODS[period],\n          teacherId: props.id ? props.id : auth.user.teacher,\n          courseId: auth.user.courses[course].id,\n          year: year,\n        },\n      },\n    });\n    refetch();\n    setChanged(false)\n  };\n\n  const { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_NOTES_QUERY,\n    {\n      variables: {\n        teacherId: props.id ? props.id : auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        period: PERIODS[period],\n        year: parseInt(year),\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [value, setValue] = useState(\"\");\n\n  const items = [\n    {\n      type: \"dropdown\",\n      data: auth.user.courses.map((course) => course.name),\n      label: \"Предмет :\",\n      text: auth.user.courses[course].name,\n      onClick: getCourse,\n    },\n    {\n      type: \"button\",\n      text: \"Сохранить\",\n      onClick: save,\n    },\n  ];\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  if (value === \"\" && data.fetchNotes && data.fetchNotes.text !== \"\" && !changed)\n    setValue(data.fetchNotes.text);\n\n  const change = (e) => {\n    setChanged(true);\n    setValue(e.target.value);\n  }\n\n  return (\n    <div className=\"notes_container\">\n      <Controls items={items} />\n      <textarea\n        placeholder=\"Это - место для заметок...\"\n        value={value}\n        onChange={change}\n      ></textarea>\n    </div>\n  );\n};\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableCell.js",[],["143","144"],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/constants.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Compensation.js",["145","146","147"],"import { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { UPDATE_REPLACEMENTS_MUTATION } from \"../scripts/mutations\";\nimport { FETCH_REPLACEMENTS_QUERY } from \"../scripts/queries\";\nimport { useAuth } from \"../scripts/use-auth\";\nimport { EditableCell } from \"./EditableCell\";\nimport { EditableDateCell } from \"./EditableDateCell\";\nimport { TableControls } from \"./TableControls\";\nimport \"../styles/Compensation.css\";\n\nexport default function Compensation(props) {\n  let auth = useAuth();\n\n  const [course, setCourse] = useState(0);\n  const [month, setMonth] = useState(moment().month());\n\n  var { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_REPLACEMENTS_QUERY,\n    {\n      variables: {\n        teacherId: props.id ? props.id : auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        date_gte: moment()\n          .month(month)\n          .clone()\n          .startOf(\"month\")\n          .utc()\n          .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n          .concat(\"Z\"),\n        date_lte: moment()\n          .month(month)\n          .clone()\n          .endOf(\"month\")\n          .utc()\n          .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n          .concat(\"Z\"),\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [update] = useMutation(UPDATE_REPLACEMENTS_MUTATION);\n\n  const save = async () => {\n\n    var result = [];\n    studentData.forEach((student) => {\n      student.journalEntry.forEach((mark) => {\n        if (mark.replacement)\n          result.push({\n            id: mark.replacement.id,\n            date: mark.replacement.date,\n            entryId: mark.id,\n          });\n      });\n    });\n\n    await update({\n      variables: {\n        data: result,\n      },\n    });\n\n    refetch();\n  };\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  var studentData = [];\n\n  data.fetchReplacements.forEach((student) => {\n    if (student.journalEntry.length > 0) {\n      studentData.push(student);\n    }\n  });\n\n  const updateDates = (value, id, entry, row) => {\n\n    const student = studentData.find((item, index) => item.student.id === row);\n    const studentIndex = studentData.indexOf(student);\n    var mark = student.journalEntry.find((item) => item.id === entry);\n    const markIndex = student.journalEntry.indexOf(mark);\n\n    let flag = value === \"\";\n    value = value?.toLocaleDateString(\"ru-RU\").split(\".\");\n    const newRepl = {\n      id: !mark.replacement ? 0 : id,\n      date: `${value[2]}-${value[1]}-${value[0]}`.concat(\"T00:00:00.000Z\"),\n      entryId: entry,\n    };\n\n    studentData = [\n      ...studentData.slice(0, studentIndex),\n      {\n        ...studentData[studentIndex],\n        journalEntry: [\n          ...studentData[studentIndex].journalEntry.slice(0, markIndex),\n          {\n            ...studentData[studentIndex].journalEntry[markIndex],\n            replacement: newRepl,\n          },\n          ...studentData[studentIndex].journalEntry.slice(markIndex + 1),\n        ],\n      },\n      ...studentData.slice(studentIndex + 1),\n    ];\n  };\n\n  return (\n    <>\n      <TableControls\n        initialMonth={month}\n        setMonth={setMonth}\n        save={save}\n        courses={auth.user.courses}\n        course={course}\n        setCourse={setCourse}\n      />\n      <table className=\"compensation_table\">\n        <thead>\n          <tr>\n            <th className=\"name_column\">Имя ученика</th>\n            {Array(10)\n              .fill(1)\n              .map((item, index) => (\n                <>\n                  <th>Пропуск</th>\n                  <th>Выдано</th>\n                </>\n              ))}\n          </tr>\n        </thead>\n        <tbody>\n          {studentData.map((item) => {\n            return (\n              <tr>\n                <td className=\"name_cell\">{`${item.student.surname} ${item.student.name}`}</td>\n                {Array(10)\n                  .fill(1)\n                  .map((num, index) => {\n                    var lesson = null;\n                    var lesson_date = null;\n                    var repl = null;\n                    if (item.journalEntry[index]) {\n                      lesson = item.journalEntry[index]\n                      lesson_date = lesson.date.split(\"T\")[0];\n                      if (lesson.replacement) repl = lesson.replacement;\n                    }\n\n                    return (\n                      <>\n                        <td className=\"name_cell\">\n                          {lesson_date ? `${lesson_date.split(\"-\")[2]}.${lesson_date.split(\"-\")[1]}.${lesson_date.split(\"-\")[0]}` : \"\"}\n                        </td>\n                        <td>\n                          {lesson ? (\n                            <EditableDateCell\n                              initialValue={\n                                repl ? new Date(repl.date.split(\"T\")[0]) : \"\"\n                              }\n                              column={repl ? repl.id : 0}\n                              group={lesson.id}\n                              month={month + 1}\n                              row={item.student.id}\n                              updateDates={updateDates}\n                            />\n                          ) : (\n                            \"\"\n                          )}\n                        </td>\n                      </>\n                    );\n                  })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Menu.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/mutations.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/queries.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/ErrorScreen.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/index.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/DataPage.js",["148","149","150","151","152","153","154","155","156","157"],"import { NetworkStatus, useQuery } from \"@apollo/client\";\nimport React, { useRef, useState } from \"react\";\nimport { PROGRAMS } from \"../scripts/constants\";\nimport {\n  FETCH_COURSES_QUERY,\n  FETCH_STUDENTS_QUERY,\n  FETCH_TEACHERS_QUERY,\n} from \"../scripts/queries\";\nimport Controls from \"./Controls\";\nimport \"../styles/Changes.css\";\n\nimport { BsChevronDown, BsChevronUp } from \"react-icons/bs\";\nimport { useOnClickOutside } from \"../scripts/utils\";\n\nexport default function Changes(props) {\n  const dataTypes = [\"Учителя\", \"Ученики\", \"Предметы\"];\n  const queryTypes = [\n    FETCH_TEACHERS_QUERY,\n    FETCH_STUDENTS_QUERY,\n    FETCH_COURSES_QUERY,\n  ];\n  const indexTypes = [\"fetchTeachers\", \"fetchStudents\", \"fetchCourses\"];\n\n  const mutationTypes = [];\n\n  const [type, setType] = useState(0);\n\n  const [blocksVisible, setBlocksVisible] = useState({\n    teachers: true,\n    courses: true,\n    students: true,\n  })\n\n  const openNextBlock = (nextBlock, currentEl) => {\n    setBlocksVisible(prev => ({ ...prev, [nextBlock]: true }))\n  }\n\n  const getType = (e) => {\n    setType(parseInt(e.target.getAttribute(\"data-index\")));\n    refetch();\n  };\n\n  const add = (e) => {\n    return null;\n  };\n\n\n  const remove = (e) => {\n    return null;\n  }\n\n  var { loading, data, error, refetch, networkStatus } = useQuery(\n    queryTypes[type],\n    {\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  const TeacherItem = (props) => {\n\n    const expand = (e) => {\n      setEditVisible(val => !val);\n    }\n\n    const outsideHandler = (e) => {\n      if (editVisible) setEditVisible(false)\n    }\n\n    const ref = useRef();\n\n    //useOnClickOutside(ref, outsideHandler)\n\n    const [editVisible, setEditVisible] = useState(false);\n\n    return (\n      <li className=\"change_item teacher\" ref={ref}>\n        <div className={`text_panel ${editVisible ? \"visible\" : \"\"}`} >\n          <p>{`${props.data.name} ${props.data.surname}`}</p>\n          <span className={`arrow_icon_container ${editVisible ? \"visible\" : \"\"}`} onClick={expand}>\n            {editVisible ? <BsChevronUp /> : <BsChevronDown />}\n          </span>\n        </div>\n        <div className={`edit_panel ${editVisible ? \"visible\" : \"\"}`}>\n          <input value={props.data.name} />\n          <input value={props.data.surname} />\n          {/* save */}\n        </div>\n      </li>\n    );\n  };\n\n  const StudentItem = (props) => {\n    return (\n      <li className=\"change_item student\">\n        <p>\n          {`${props.data.name} ${props.data.surname}${props.data.class} ${PROGRAMS[props.data.program]\n            }`}\n        </p>\n\n      </li>\n    );\n  };\n\n  const CourseItem = (props) => {\n    return (\n      <li className=\"change_item course\">\n        <p>{`${props.data.name} Групповой: ${props.data.group ? \"да\" : \"нет\"\n          }`}</p>\n      </li>\n    );\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"changes_block left visible\">\n        <div className=\"list_wrapper\">\n          <ul>\n            {data[indexTypes[type]].map((item) => {\n              switch (type) {\n                case 0:\n                  return <TeacherItem data={item} />;\n                case 1:\n                  return <StudentItem data={item} />;\n                case 2:\n                  return <CourseItem data={item} />;\n                default:\n                  return spinner;\n              }\n            })}\n          </ul>\n        </div>\n      </div>\n      <div className={`changes_block center ${blocksVisible.courses ? \"visible\" : \"\"}`}>\n        <div className=\"list_wrapper\">\n          <ul>\n            {data[indexTypes[type]].map((item) => {\n              switch (type) {\n                case 0:\n                  return <TeacherItem data={item} />;\n                case 1:\n                  return <StudentItem data={item} />;\n                case 2:\n                  return <CourseItem data={item} />;\n                default:\n                  return spinner;\n              }\n            })}\n          </ul>\n        </div>\n      </div>\n      <div className={`changes_block right ${blocksVisible.students ? \"visible\" : \"\"}`}>\n        <div className=\"list_wrapper\">\n          <ul>\n            {data[indexTypes[type]].map((item) => {\n              switch (type) {\n                case 0:\n                  return <TeacherItem data={item} />;\n                case 1:\n                  return <StudentItem data={item} />;\n                case 2:\n                  return <CourseItem data={item} />;\n                default:\n                  return spinner;\n              }\n            })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"158","severity":1,"message":"159","line":20,"column":10,"nodeType":"160","messageId":"161","endLine":20,"endColumn":16},{"ruleId":"158","severity":1,"message":"162","line":27,"column":7,"nodeType":"160","messageId":"161","endLine":27,"endColumn":13},{"ruleId":"163","severity":1,"message":"164","line":349,"column":9,"nodeType":"160","messageId":"165","endLine":349,"endColumn":16},{"ruleId":"163","severity":1,"message":"166","line":353,"column":14,"nodeType":"160","messageId":"165","endLine":353,"endColumn":15},{"ruleId":"163","severity":1,"message":"167","line":354,"column":11,"nodeType":"160","messageId":"165","endLine":354,"endColumn":17},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"168","replacedBy":"172"},{"ruleId":"170","replacedBy":"173"},{"ruleId":"158","severity":1,"message":"174","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":28},{"ruleId":"158","severity":1,"message":"175","line":39,"column":10,"nodeType":"160","messageId":"161","endLine":39,"endColumn":17},{"ruleId":"158","severity":1,"message":"176","line":39,"column":19,"nodeType":"160","messageId":"161","endLine":39,"endColumn":29},{"ruleId":"168","replacedBy":"177"},{"ruleId":"170","replacedBy":"178"},{"ruleId":"158","severity":1,"message":"179","line":22,"column":24,"nodeType":"160","messageId":"161","endLine":22,"endColumn":29},{"ruleId":"158","severity":1,"message":"180","line":3,"column":19,"nodeType":"160","messageId":"161","endLine":3,"endColumn":29},{"ruleId":"158","severity":1,"message":"181","line":42,"column":9,"nodeType":"160","messageId":"161","endLine":42,"endColumn":16},{"ruleId":"158","severity":1,"message":"182","line":47,"column":9,"nodeType":"160","messageId":"161","endLine":47,"endColumn":18},{"ruleId":"158","severity":1,"message":"183","line":1,"column":29,"nodeType":"160","messageId":"161","endLine":1,"endColumn":38},{"ruleId":"158","severity":1,"message":"184","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":23},{"ruleId":"168","replacedBy":"185"},{"ruleId":"170","replacedBy":"186"},{"ruleId":"158","severity":1,"message":"183","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":26},{"ruleId":"158","severity":1,"message":"179","line":72,"column":37,"nodeType":"160","messageId":"161","endLine":72,"endColumn":42},{"ruleId":"158","severity":1,"message":"187","line":72,"column":44,"nodeType":"160","messageId":"161","endLine":72,"endColumn":51},{"ruleId":"158","severity":1,"message":"188","line":72,"column":53,"nodeType":"160","messageId":"161","endLine":72,"endColumn":66},{"ruleId":"168","replacedBy":"189"},{"ruleId":"170","replacedBy":"190"},{"ruleId":"158","severity":1,"message":"191","line":1,"column":8,"nodeType":"160","messageId":"161","endLine":1,"endColumn":13},{"ruleId":"158","severity":1,"message":"180","line":2,"column":19,"nodeType":"160","messageId":"161","endLine":2,"endColumn":29},{"ruleId":"158","severity":1,"message":"181","line":37,"column":9,"nodeType":"160","messageId":"161","endLine":37,"endColumn":16},{"ruleId":"158","severity":1,"message":"182","line":43,"column":9,"nodeType":"160","messageId":"161","endLine":43,"endColumn":18},{"ruleId":"158","severity":1,"message":"179","line":74,"column":26,"nodeType":"160","messageId":"161","endLine":74,"endColumn":31},{"ruleId":"168","replacedBy":"192"},{"ruleId":"170","replacedBy":"193"},{"ruleId":"158","severity":1,"message":"194","line":7,"column":10,"nodeType":"160","messageId":"161","endLine":7,"endColumn":22},{"ruleId":"158","severity":1,"message":"179","line":18,"column":24,"nodeType":"160","messageId":"161","endLine":18,"endColumn":29},{"ruleId":"158","severity":1,"message":"195","line":90,"column":9,"nodeType":"160","messageId":"161","endLine":90,"endColumn":13},{"ruleId":"158","severity":1,"message":"196","line":9,"column":8,"nodeType":"160","messageId":"161","endLine":9,"endColumn":16},{"ruleId":"158","severity":1,"message":"197","line":13,"column":10,"nodeType":"160","messageId":"161","endLine":13,"endColumn":27},{"ruleId":"158","severity":1,"message":"198","line":16,"column":9,"nodeType":"160","messageId":"161","endLine":16,"endColumn":18},{"ruleId":"158","severity":1,"message":"199","line":24,"column":9,"nodeType":"160","messageId":"161","endLine":24,"endColumn":22},{"ruleId":"158","severity":1,"message":"200","line":34,"column":9,"nodeType":"160","messageId":"161","endLine":34,"endColumn":22},{"ruleId":"158","severity":1,"message":"201","line":38,"column":9,"nodeType":"160","messageId":"161","endLine":38,"endColumn":16},{"ruleId":"158","severity":1,"message":"202","line":43,"column":9,"nodeType":"160","messageId":"161","endLine":43,"endColumn":12},{"ruleId":"158","severity":1,"message":"203","line":48,"column":9,"nodeType":"160","messageId":"161","endLine":48,"endColumn":15},{"ruleId":"158","severity":1,"message":"179","line":52,"column":24,"nodeType":"160","messageId":"161","endLine":52,"endColumn":29},{"ruleId":"158","severity":1,"message":"204","line":70,"column":11,"nodeType":"160","messageId":"161","endLine":70,"endColumn":25},"no-unused-vars","'Prompt' is defined but never used.","Identifier","unusedVar","'client' is assigned a value but never used.","no-redeclare","'counter' is already defined.","redeclared","'i' is already defined.","'border' is already defined.","no-native-reassign",["205"],"no-negated-in-lhs",["206"],["205"],["206"],"'useCallback' is defined but never used.","'changed' is assigned a value but never used.","'setChanged' is assigned a value but never used.",["205"],["206"],"'error' is assigned a value but never used.","'QUATERS_RU' is defined but never used.","'getYear' is assigned a value but never used.","'getPeriod' is assigned a value but never used.","'useEffect' is defined but never used.","'GROUP_PERIODS' is defined but never used.",["205"],["206"],"'refetch' is assigned a value but never used.","'networkStatus' is assigned a value but never used.",["205"],["206"],"'React' is defined but never used.",["205"],["206"],"'EditableCell' is defined but never used.","'flag' is assigned a value but never used.","'Controls' is defined but never used.","'useOnClickOutside' is defined but never used.","'dataTypes' is assigned a value but never used.","'mutationTypes' is assigned a value but never used.","'openNextBlock' is assigned a value but never used.","'getType' is assigned a value but never used.","'add' is assigned a value but never used.","'remove' is assigned a value but never used.","'outsideHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]