[{"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journal.js":"1","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/use-auth.js":"2","/home/shkri/Documents/GDMSH/cj-apollo/src/components/App.js":"3","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Login.js":"4","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Subgroups.js":"5","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Consult.js":"6","/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableDateCell.js":"7","/home/shkri/Documents/GDMSH/cj-apollo/src/components/TableControls.js":"8","/home/shkri/Documents/GDMSH/cj-apollo/src/reportWebVitals.js":"9","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Header.js":"10","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journals.js":"11","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/utils.js":"12","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Controls.js":"13","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Notes.js":"14","/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableCell.js":"15","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/constants.js":"16","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Compensation.js":"17","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Menu.js":"18","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/mutations.js":"19","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/queries.js":"20","/home/shkri/Documents/GDMSH/cj-apollo/src/components/ErrorScreen.js":"21","/home/shkri/Documents/GDMSH/cj-apollo/src/index.js":"22","/home/shkri/Documents/GDMSH/cj-apollo/src/components/DataPageView.js":"23","/home/shkri/Documents/GDMSH/cj-apollo/src/components/DataPageApollo.js":"24"},{"size":19316,"mtime":1622208487424,"results":"25","hashOfConfig":"26"},{"size":1133,"mtime":1617199912658,"results":"27","hashOfConfig":"26"},{"size":2685,"mtime":1622023630447,"results":"28","hashOfConfig":"26"},{"size":2124,"mtime":1619624157232,"results":"29","hashOfConfig":"26"},{"size":3591,"mtime":1620034509180,"results":"30","hashOfConfig":"26"},{"size":6202,"mtime":1620375670811,"results":"31","hashOfConfig":"26"},{"size":1277,"mtime":1620032041104,"results":"32","hashOfConfig":"26"},{"size":3714,"mtime":1619626990165,"results":"33","hashOfConfig":"26"},{"size":362,"mtime":1612134626885,"results":"34","hashOfConfig":"26"},{"size":714,"mtime":1619864926730,"results":"35","hashOfConfig":"26"},{"size":4992,"mtime":1620042829734,"results":"36","hashOfConfig":"26"},{"size":833,"mtime":1617116634728,"results":"37","hashOfConfig":"26"},{"size":3559,"mtime":1622200110964,"results":"38","hashOfConfig":"26"},{"size":3417,"mtime":1620035587764,"results":"39","hashOfConfig":"26"},{"size":1857,"mtime":1619726312288,"results":"40","hashOfConfig":"26"},{"size":1927,"mtime":1619625952634,"results":"41","hashOfConfig":"26"},{"size":5638,"mtime":1620026104537,"results":"42","hashOfConfig":"26"},{"size":1821,"mtime":1620203480296,"results":"43","hashOfConfig":"26"},{"size":2874,"mtime":1622208784137,"results":"44","hashOfConfig":"26"},{"size":3220,"mtime":1621370852150,"results":"45","hashOfConfig":"26"},{"size":159,"mtime":1617445235152,"results":"46","hashOfConfig":"26"},{"size":1423,"mtime":1620451593152,"results":"47","hashOfConfig":"26"},{"size":8830,"mtime":1622578936541,"results":"48","hashOfConfig":"26"},{"size":2092,"mtime":1622209091871,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1vjoe1e",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"67"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"67"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"67"},"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journal.js",["115","116","117","118","119"],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/use-auth.js",[],["120","121"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/App.js",["122","123","124"],"import React, { useCallback, useRef, useState } from \"react\";\nimport \"../styles/App.css\";\nimport Menu from \"./Menu\";\nimport Header from \"./Header\";\nimport Journal from \"./Journal\";\nimport Compensation from \"./Compensation\";\nimport Login from \"./Login\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../scripts/use-auth.js\";\nimport Journals from \"./Journals\";\nimport DataPageApollo from \"./DataPageApollo\";\nimport { Notes } from \"./Notes\";\nimport { Consult } from \"./Consult\";\nimport { Subgroups } from \"./Subgroups\";\nimport { ErrorScreen } from \"./ErrorScreen\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport default function App() {\n  const auth = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        <Login />\n      </Route>\n      <Route path=\"/error\" component={ErrorScreen} />\n      <Route\n        path=\"/\"\n        render={({ location }) =>\n          auth.user ? <Content /> : <Redirect to=\"/login\" />\n        }\n      />\n    </Switch>\n  );\n}\n\nconst Content = () => {\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [changed, setChanged] = useState(false);\n  const auth = useAuth();\n  const menuRef = useRef();\n\n  const menuClick = (event) => {\n    setMenuVisible((prev) => !prev)\n  }\n\n  const adminBoard = (\n    <Switch>\n      <Route path=\"/journals\" component={Journals} />\n      <Route path=\"/data\" component={DataPageApollo} />\n      <Redirect from=\"/\" to=\"/journals\" />\n    </Switch>\n  );\n\n  const userBoard = (\n    <Switch>\n      <Route path=\"/journal\" render={(props) => (<Journal {...props} menuRef={menuRef} />)} />\n      <Route path=\"/compensation\" render={(props) => (<Compensation {...props} menuRef={menuRef} />)} />\n      <Route path=\"/notes\" render={(props) => (<Notes {...props} menuRef={menuRef} />)} />\n      <Route path=\"/consult\" render={(props) => (<Consult {...props} menuRef={menuRef} />)} />\n      <Route path=\"/subgroups\" render={(props) => (<Subgroups {...props} menuRef={menuRef} />)} />\n      <Redirect from=\"/\" to=\"/journal\" />\n    </Switch>\n  );\n\n  return (\n    <div className=\"App\">\n      <ErrorBoundary FallbackComponent={ErrorScreen}>\n        <Menu\n          visible={menuVisible}\n          close={() => setMenuVisible((prev) => !prev)}\n        ></Menu>\n        <div\n          className={`Cover ${menuVisible ? \"menuVisible\" : \"\"}`}\n          onClick={() => setMenuVisible((prev) => !prev)}\n        />\n        <div className={`Content ${menuVisible ? \"menuVisible\" : \"\"}`}>\n          <Header menuClick={menuClick} menuRef={menuRef}></Header>\n          {auth.user.roleId === 1 ? adminBoard : userBoard}\n        </div>\n      </ErrorBoundary>\n    </div>\n  );\n};\n",["125","126"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Login.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Subgroups.js",["127"],"import { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { PROGRAMS } from \"../scripts/constants\";\nimport { UPDATE_SUBGROUPS_MUTATION } from \"../scripts/mutations\";\nimport { FETCH_SUBGROUPS_QUERY } from \"../scripts/queries\";\nimport { useAuth } from \"../scripts/use-auth\";\nimport \"../styles/Subgroups.css\";\n\nimport Controls from \"./Controls\";\n\nexport const Subgroups = () => {\n  const auth = useAuth();\n\n  const availableCourses = auth.user.courses.filter((course) => course.group);\n\n  const [course, setCourse] = useState(0);\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n  };\n\n  var { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_SUBGROUPS_QUERY,\n    {\n      variables: {\n        courseId: availableCourses[course].id,\n        teacherId: auth.user.teacher,\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [update] = useMutation(UPDATE_SUBGROUPS_MUTATION);\n\n  const save = () => {\n    const result = [];\n    data.forEach((group) => {\n      group.relations.forEach((item) => {\n        result.push({\n          id: item.id,\n          subgroup: item.subgroup,\n        });\n      });\n    });\n    update({\n      variables: {\n        data: result,\n      },\n    });\n    refetch();\n  };\n\n  const items = [\n    {\n      type: \"dropdown\",\n      data: availableCourses.map((course) => course.name),\n      label: \"Предмет :\",\n      text: availableCourses[course].name,\n      onClick: getCourse,\n    },\n    {\n      type: \"button\",\n      text: \"Сохранить\",\n      onClick: save,\n    },\n  ];\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  data = data.fetchSubgroups;\n\n  const updateData = (value, id, group) => {\n    const studentIndex = data[group].relations.findIndex(\n      (student) => student.student.id === id\n    );\n    data = [\n      ...data.slice(0, group),\n      {\n        ...data[group],\n        relations: [\n          ...data[group].relations.slice(0, studentIndex),\n          {\n            ...data[group].relations[studentIndex],\n            subgroup: parseInt(value),\n          },\n          ...data[group].relations.slice(studentIndex + 1),\n        ],\n      },\n      ...data.slice(group + 1),\n    ];\n  };\n\n  const Item = (props) => {\n    const [value, setValue] = useState(props.subgroup);\n\n    const onChange = (e) => {\n      setValue(e.target.value);\n      if (e.target.value.length > 0)\n        props.updateData(e.target.value, props.id, props.group);\n    };\n\n    return (\n      <li className=\"item\">\n        <p>{`${props.surname} ${props.name}`}</p>\n        <label> Группа:</label>\n        <input value={value} onChange={onChange} maxlength=\"1\" />\n      </li>\n    );\n  };\n\n  return (\n    <div>\n      <Controls items={items} />\n      <div className=\"group_wrapper\">\n        <ul className=\"group_list\">\n          {data.map((group, index) => (\n            <>\n              <li className=\"group_header\">{`Класс: ${group.class}${PROGRAMS[group.program]}`}</li>\n              {group.relations.map((item) => (\n                <Item\n                  name={item.student.name}\n                  surname={item.student.surname}\n                  subgroup={item.subgroup}\n                  group={index}\n                  id={item.student.id}\n                  updateData={updateData}\n                />\n              ))}\n            </>\n          ))}\n        </ul>\n      </div>\n\n    </div>\n  );\n};\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Consult.js",["128","129","130"],"import moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { PERIODS, QUATERS_RU } from \"../scripts/constants\";\nimport { useAuth } from \"../scripts/use-auth\";\nimport { getQuater } from \"../scripts/utils\";\nimport Controls from \"./Controls\";\nimport { EditableDateCell } from \"./EditableDateCell\";\nimport {\n  DELETE_CONSULTS_MUTATION,\n  UPDATE_CONSULTS_MUTATION,\n} from \"../scripts/mutations\";\n\nimport { FETCH_CONSULTS_QUERY } from \"../scripts/queries\";\nimport \"../styles/Consult.css\";\nimport { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\n\nexport const Consult = (props) => {\n  const auth = useAuth();\n\n  \n\n  const [year, setYear] = useState(2021);\n  const [period, setPeriod] = useState(getQuater(moment().month()));\n  const [course, setCourse] = useState(0);\n\n  var changed = false;\n\n  const listener = (event) => {\n    if (changed) {\n      event.preventDefault();\n      let confirm = window.confirm(\"Вы действительно хотите покинуть страницу? Все несохраненные изменения будут потеряны.\")\n      if (!confirm) event.stopImmediatePropagation();\n    }\n  }\n\n  useEffect(() => {\n    props.menuRef?.current.addEventListener('click', listener)\n\n    return () => { props.menuRef?.current?.removeEventListener('click', listener) }\n  })\n\n  const getYear = (e) => {\n    setYear(e.target.value);\n    refetch();\n  };\n\n  const getPeriod = (e) => {\n    setPeriod(e.target.getAttribute(\"data-index\"));\n    refetch();\n  };\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n    refetch();\n  };\n\n  let { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_CONSULTS_QUERY,\n    {\n      variables: {\n        teacherId: props.id ? props.id : auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        period: PERIODS[period],\n        year: parseInt(year),\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [update] = useMutation(UPDATE_CONSULTS_MUTATION);\n  const [clear] = useMutation(DELETE_CONSULTS_MUTATION);\n\n  const updateDates = (value, index, row) => {\n    const student = data.find((item, index) => item.student.id === row);\n    const studentIndex = data.indexOf(student);\n    var date = student.consult.find((item) => item.id === index);\n    const dateIndex = student.consult.indexOf(date);\n    changed = true;\n    value = value.toLocaleDateString(\"ru-RU\").split(\".\");\n\n    if (!date) {\n      const newConsult = {\n        id: !date ? 0 : date.id,\n        date: `${value[2]}-${value[1]}-${value[0]}`.concat(\"T00:00:00.000Z\"),\n        period: PERIODS[period],\n        year: parseInt(year),\n        update_flag: true,\n        delete_flag: false,\n      };\n      data = [\n        ...data.slice(0, studentIndex),\n        {\n          ...data[studentIndex],\n          consult: [...data[studentIndex].consult, newConsult],\n        },\n        ...data.slice(studentIndex + 1),\n      ];\n      return;\n    }\n    let flag = value === \"\";\n    data = [\n      ...data.slice(0, studentIndex),\n      {\n        ...data[studentIndex],\n        consult: [\n          ...data[studentIndex].consult.slice(0, dateIndex),\n          {\n            ...data[studentIndex].consult[dateIndex],\n            date: `${value[2]}-${value[1]}-${value[0]}`.concat(\"T00:00:00.000Z\"),\n            delete_flag: flag,\n            update_flag: !flag,\n          },\n          ...data[studentIndex].consult.slice(dateIndex + 1),\n        ],\n      },\n      ...data.slice(studentIndex + 1),\n    ];\n    console.log(data);\n    \n  };\n\n  const createUpdateData = () => {\n    let result = [];\n    data.forEach((student) => {\n      student.consult.forEach((date) => {\n        if (date.update_flag)\n          result.push({\n            id: date.id,\n            date: date.date,\n            period: 'fourth',\n            year: 2021,\n            relationId: student.id,\n          });\n      });\n    });\n    return result;\n  };\n\n  const createClearData = () => {\n    let result = [];\n    data.forEach((student) => {\n      student.consult.forEach((date) => {\n        if (date.delete_flag && date.id !== 0) result.push(date.id);\n      });\n    });\n    return result;\n  };\n\n  const save = async (e) => {\n\n    await update({\n      variables: {\n        data: createUpdateData(),\n      },\n    });\n\n    await clear({\n      variables: {\n        ids: createClearData(),\n      },\n    });\n    refetch();\n  };\n\n  const items = [\n    {\n      type: \"dropdown\",\n      data: auth.user.courses.map((course) => course.name),\n      label: \"Предмет :\",\n      text: auth.user.courses[course].name,\n      onClick: getCourse,\n    },\n    {\n      type: \"button\",\n      text: \"Сохранить\",\n      onClick: save,\n    },\n  ];\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n  if (error) {\n\n  }\n\n  data = data.fetchConsults;\n\n  return (\n    <div className=\"consult_container\">\n      <Controls items={items} />\n      <table className=\"consult_table\">\n        <thead>\n          <tr>\n            <th className=\"name_column\">Имя ученика</th>\n            <th className=\"date_columns\" colSpan=\"5\">\n              Даты\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item) => (\n            <tr>\n              <td className=\"name_cell\">\n                {`${item.student.surname} ${item.student.name}`}\n              </td>\n              {Array(5)\n                .fill(1)\n                .map((num, index) => (\n                  <td>\n                    <EditableDateCell\n                      initialValue={\n                        item.consult[index]\n                          ? new Date(item.consult[index].date.split(\"T\")[0])\n                          : \"\"\n                      }\n                      column={item.consult[index]?.id ? item.consult[index]?.id : 0}\n                      group={item.student.id}\n                      updateDates={updateDates}\n                    />\n                  </td>\n                ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n",["131","132"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableDateCell.js",["133","134"],"import React, { forwardRef, useEffect, useState } from \"react\";\nimport { GROUP_PERIODS } from \"../scripts/constants\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"../styles/Journal.css\";\nimport ru from \"date-fns/locale/ru\";\nimport moment from \"moment\";\n\nexport const EditableDateCell = ({\n  initialValue,\n  updateDates,\n  column,\n  group,\n  month,\n  row,\n  full = true,\n}) => {\n  const [value, setValue] = useState(initialValue);\n\n  const Input = forwardRef(({ value, onClick }, ref) => (\n    <p\n      onClick={onClick}\n      ref={ref}\n      style={{ padding: \"0\", cursor: \"pointer\", margin: \"0\" }}\n    >\n      {value ? `${value.split(\"/\")[1]}.${value.split(\"/\")[0]}${full ? \".\" + value.split(\"/\")[2] : \"\"}` : \".....\"}\n    </p>\n  ));\n\n  const start_date = moment()\n    .clone()\n    .month(month - 1)\n    .startOf(\"month\")\n    .toDate();\n  const end_date = moment()\n    .clone()\n    .month(month - 1)\n    .endOf(\"month\")\n    .toDate();\n  return (\n    <DatePicker\n      selected={value}\n      onChange={(date) => {\n        updateDates(date, column, group, row ? row : 0);\n        setValue(date);\n      }}\n      customInput={<Input />}\n      minDate={start_date}\n      maxDate={end_date}\n      locale={ru}\n    />\n  );\n};\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/TableControls.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/reportWebVitals.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Header.js",[],["135","136"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Journals.js",["137","138","139","140"],"import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { FETCH_JOURNAL_QUERY, FETCH_TEACHERS_QUERY } from \"../scripts/queries\";\nimport \"../styles/Teachers.css\";\nimport moment from \"moment\";\nimport { QUATERS, QUATERS_RU } from \"../scripts/constants\";\nimport { getQuater } from \"../scripts/utils\";\nimport Controls from \"./Controls\";\n\nexport default function Teachers(props) {\n  const [teacherIndex, setTeacherIndex] = useState(1);\n  const [period, setPeriod] = useState(getQuater(moment().month()));\n  const [year, setYear] = useState(moment().year());\n  const [course, setCourse] = useState(0);\n\n  const spinner = <div>Загрузка</div>;\n\n  const { loading: tcLoading, data: teachers } = useQuery(FETCH_TEACHERS_QUERY);\n\n  if (tcLoading) return spinner;\n\n  const ListItem = (props) => {\n    return (\n      <li tabIndex=\"0\" onClick={() => setTeacherIndex(props.index)}>\n        <p>{props.name}</p>\n      </li>\n    );\n  };\n\n  const extrudeDate = (date) => {\n    const [month, day] = date.split(\"T\")[0].split(\"-\").slice(1);\n    return `${day}/${month}`;\n  };\n\n  const StudentItem = (props) => {\n    const cells = Array(props.cells)\n      .fill()\n      .map((x, i) => i);\n    return (\n      <div className=\"teacher_item\">\n        <div className=\"item_header\">\n          <p>{props.name}</p>\n          <p>{props.hours}</p>\n        </div>\n        <div className=\"item_data\">\n          <table>\n            <thead>\n              <tr>\n                {cells.map((cell) => (\n                  <th key={cell}>\n                    {props.dates[cell] ? extrudeDate(props.dates[cell]) : \"...\"}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {cells.map((cell) => (\n                  <td key={cell}>\n                    {props.marks[cell] ? props.marks[cell] : \" \"}\n                  </td>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  const TeacherJournal = (props) => {\n    const { loading, data: journal, error, refetch, networkStatus } = useQuery(\n      FETCH_JOURNAL_QUERY,\n      {\n        variables: {\n          courseId: props.courseId,\n          teacherId: props.teacherIndex,\n          date_gte: moment()\n            .month(QUATERS[props.period][0])\n            .year(props.year)\n            .startOf(\"month\")\n            .utc()\n            .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n            .concat(\"Z\"),\n          date_lte: moment()\n            .month(QUATERS[props.period].slice(-1)[0])\n            .year(props.year)\n            .endOf(\"month\")\n            .utc()\n            .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n            .concat(\"Z\"),\n        },\n        fetchPolicy: \"network-only\",\n      }\n    );\n\n    if (loading) return spinner;\n\n    return journal.fetchJournal.map((item) => {\n      const name = `${item.student.name} ${item.student.surname}`;\n      const hours = `${item.journalEntry.length}`;\n      const dates = item.journalEntry.map((entry) => entry.date);\n      const marks = item.journalEntry.map((entry) => entry.mark);\n      return (\n        <StudentItem\n          name={name}\n          hours={hours}\n          dates={dates}\n          marks={marks}\n          cells={15}\n          key={name}\n        />\n      );\n    });\n  };\n\n  const getYear = (e) => {\n    setYear(e.target.value);\n  };\n\n  const getPeriod = (e) => {\n    setPeriod(e.target.getAttribute(\"data-index\"));\n  };\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n  };\n\n  const items = [\n    {\n      type: \"input\",\n      label: \"Год :\",\n      text: year,\n      onClick: getYear,\n    },\n    {\n      type: \"dropdown\",\n      data: QUATERS_RU,\n      label: \"Период :\",\n      text: QUATERS_RU[period],\n      onClick: getPeriod,\n    },\n    {\n      type: \"dropdown\",\n      data: teachers.fetchTeachers\n        .find((teacher) => teacher.id === teacherIndex)\n        .relations.map((item) => item.course.name),\n      label: \"Предмет :\",\n      text: teachers.fetchTeachers.find(\n        (teacher) => teacher.id === teacherIndex\n      ).relations[course].course.name,\n      onClick: getCourse,\n    },\n  ];\n\n  return (\n    <div className=\"page\">\n      <div className=\"block_left\">\n        <ul>\n          {teachers.fetchTeachers.map((teacher) => (\n            <ListItem\n              name={`${teacher.name} ${teacher.surname}`}\n              index={teacher.id}\n              key={teacher.id}\n            />\n          ))}\n        </ul>\n      </div>\n      <div className=\"block_right\">\n        <Controls items={items} />\n        <TeacherJournal\n          teacherIndex={teacherIndex}\n          period={period}\n          year={year}\n          key={teacherIndex}\n          courseId={\n            teachers.fetchTeachers.find(\n              (teacher) => teacher.id === teacherIndex\n            ).relations[course].course.id\n          }\n        />\n      </div>\n    </div>\n  );\n}\n","/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/utils.js",["141"],"import React, { useEffect } from \"react\";\nimport { QUATERS } from \"./constants\";\n\nexport function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n\nexport function getQuater(month) {\n  let quater = null;\n  QUATERS.forEach((item, index) => {\n    if (item.includes(month)) quater = index;\n  });\n\n  return !quater ? 3 : quater;\n}\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Controls.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Notes.js",["142","143","144","145"],"import { useAuth } from \"../scripts/use-auth\";\nimport { PERIODS, QUATERS_RU } from \"../scripts/constants\";\n\nimport \"../styles/Notes.css\";\nimport Controls from \"./Controls\";\nimport { useEffect, useState } from \"react\";\nimport { getQuater } from \"../scripts/utils\";\nimport moment from \"moment\";\nimport { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\nimport { FETCH_NOTES_QUERY } from \"../scripts/queries\";\nimport { UPDATE_NOTE_MUTATION } from \"../scripts/mutations\";\n\nexport const Notes = (props) => {\n  const auth = useAuth();\n\n\n\n  const listener = (event) => {\n    if (changed) {\n      event.preventDefault();\n      let confirm = window.confirm(\"Вы действительно хотите покинуть страницу? Все несохраненные изменения будут потеряны.\")\n      !confirm ? event.stopImmediatePropagation() : setChanged(false);\n    }\n  }\n\n  useEffect(() => {\n    props.menuRef?.current.addEventListener('click', listener)\n\n    return () => { props.menuRef?.current?.removeEventListener('click', listener) }\n  })\n\n  const [year, setYear] = useState(2021);\n  const [period, setPeriod] = useState(getQuater(moment().month()));\n  const [course, setCourse] = useState(0);\n  const [changed, setChanged] = useState(false);\n\n  const getYear = (e) => {\n    setYear(e.target.value);\n    setValue(\"\");\n    refetch();\n  };\n\n  const getPeriod = (e) => {\n    setPeriod(e.target.getAttribute(\"data-index\"));\n    setValue(\"\");\n    refetch();\n  };\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute(\"data-index\"));\n    setValue(\"\");\n    refetch();\n  };\n\n  const [update] = useMutation(UPDATE_NOTE_MUTATION);\n\n  const save = async (e) => {\n    await update({\n      variables: {\n        data: {\n          id: data.fetchNotes ? data.fetchNotes.id : 0,\n          text: value,\n          period: PERIODS[period],\n          teacherId: props.id ? props.id : auth.user.teacher,\n          courseId: auth.user.courses[course].id,\n          year: year,\n        },\n      },\n    });\n    refetch();\n    setChanged(false)\n  };\n\n  const { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_NOTES_QUERY,\n    {\n      variables: {\n        teacherId: props.id ? props.id : auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        period: PERIODS[period],\n        year: parseInt(year),\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [value, setValue] = useState(\"\");\n\n  const items = [\n    {\n      type: \"dropdown\",\n      data: auth.user.courses.map((course) => course.name),\n      label: \"Предмет :\",\n      text: auth.user.courses[course].name,\n      onClick: getCourse,\n    },\n    {\n      type: \"button\",\n      text: \"Сохранить\",\n      onClick: save,\n    },\n  ];\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  if (value === \"\" && data.fetchNotes && data.fetchNotes.text !== \"\" && !changed)\n    setValue(data.fetchNotes.text);\n\n  const change = (e) => {\n    setChanged(true);\n    setValue(e.target.value);\n  }\n\n  return (\n    <div className=\"notes_container\">\n      <Controls items={items} />\n      <textarea\n        placeholder=\"Это - место для заметок...\"\n        value={value}\n        onChange={change}\n      ></textarea>\n    </div>\n  );\n};\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/EditableCell.js",[],["146","147"],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/constants.js",[],["148","149"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/Compensation.js",["150","151","152"],"import { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { UPDATE_REPLACEMENTS_MUTATION } from \"../scripts/mutations\";\nimport { FETCH_REPLACEMENTS_QUERY } from \"../scripts/queries\";\nimport { useAuth } from \"../scripts/use-auth\";\nimport { EditableCell } from \"./EditableCell\";\nimport { EditableDateCell } from \"./EditableDateCell\";\nimport { TableControls } from \"./TableControls\";\nimport \"../styles/Compensation.css\";\n\nexport default function Compensation(props) {\n  let auth = useAuth();\n\n  const [course, setCourse] = useState(0);\n  const [month, setMonth] = useState(moment().month());\n\n  var { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_REPLACEMENTS_QUERY,\n    {\n      variables: {\n        teacherId: props.id ? props.id : auth.user.teacher,\n        courseId: auth.user.courses[course].id,\n        date_gte: moment()\n          .month(month)\n          .clone()\n          .startOf(\"month\")\n          .utc()\n          .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n          .concat(\"Z\"),\n        date_lte: moment()\n          .month(month)\n          .clone()\n          .endOf(\"month\")\n          .utc()\n          .format(\"YYYY-MM-DDTHH:mm:ss.SSS\")\n          .concat(\"Z\"),\n      },\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [update] = useMutation(UPDATE_REPLACEMENTS_MUTATION);\n\n  const save = async () => {\n\n    var result = [];\n    studentData.forEach((student) => {\n      student.journalEntry.forEach((mark) => {\n        if (mark.replacement)\n          result.push({\n            id: mark.replacement.id,\n            date: mark.replacement.date,\n            entryId: mark.id,\n          });\n      });\n    });\n\n    await update({\n      variables: {\n        data: result,\n      },\n    });\n\n    refetch();\n  };\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  var studentData = [];\n\n  data.fetchReplacements.forEach((student) => {\n    if (student.journalEntry.length > 0) {\n      studentData.push(student);\n    }\n  });\n\n  const updateDates = (value, id, entry, row) => {\n\n    const student = studentData.find((item, index) => item.student.id === row);\n    const studentIndex = studentData.indexOf(student);\n    var mark = student.journalEntry.find((item) => item.id === entry);\n    const markIndex = student.journalEntry.indexOf(mark);\n\n    let flag = value === \"\";\n    value = value?.toLocaleDateString(\"ru-RU\").split(\".\");\n    const newRepl = {\n      id: !mark.replacement ? 0 : id,\n      date: `${value[2]}-${value[1]}-${value[0]}`.concat(\"T00:00:00.000Z\"),\n      entryId: entry,\n    };\n\n    studentData = [\n      ...studentData.slice(0, studentIndex),\n      {\n        ...studentData[studentIndex],\n        journalEntry: [\n          ...studentData[studentIndex].journalEntry.slice(0, markIndex),\n          {\n            ...studentData[studentIndex].journalEntry[markIndex],\n            replacement: newRepl,\n          },\n          ...studentData[studentIndex].journalEntry.slice(markIndex + 1),\n        ],\n      },\n      ...studentData.slice(studentIndex + 1),\n    ];\n  };\n\n  return (\n    <>\n      <TableControls\n        initialMonth={month}\n        setMonth={setMonth}\n        save={save}\n        courses={auth.user.courses}\n        course={course}\n        setCourse={setCourse}\n      />\n      <table className=\"compensation_table\">\n        <thead>\n          <tr>\n            <th className=\"name_column\">Имя ученика</th>\n            {Array(10)\n              .fill(1)\n              .map((item, index) => (\n                <>\n                  <th>Пропуск</th>\n                  <th>Выдано</th>\n                </>\n              ))}\n          </tr>\n        </thead>\n        <tbody>\n          {studentData.map((item) => {\n            return (\n              <tr>\n                <td className=\"name_cell\">{`${item.student.surname} ${item.student.name}`}</td>\n                {Array(10)\n                  .fill(1)\n                  .map((num, index) => {\n                    var lesson = null;\n                    var lesson_date = null;\n                    var repl = null;\n                    if (item.journalEntry[index]) {\n                      lesson = item.journalEntry[index]\n                      lesson_date = lesson.date.split(\"T\")[0];\n                      if (lesson.replacement) repl = lesson.replacement;\n                    }\n\n                    return (\n                      <>\n                        <td className=\"name_cell\">\n                          {lesson_date ? `${lesson_date.split(\"-\")[2]}.${lesson_date.split(\"-\")[1]}.${lesson_date.split(\"-\")[0]}` : \"\"}\n                        </td>\n                        <td>\n                          {lesson ? (\n                            <EditableDateCell\n                              initialValue={\n                                repl ? new Date(repl.date.split(\"T\")[0]) : \"\"\n                              }\n                              column={repl ? repl.id : 0}\n                              group={lesson.id}\n                              month={month + 1}\n                              row={item.student.id}\n                              updateDates={updateDates}\n                            />\n                          ) : (\n                            \"\"\n                          )}\n                        </td>\n                      </>\n                    );\n                  })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n","/home/shkri/Documents/GDMSH/cj-apollo/src/components/Menu.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/mutations.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/scripts/queries.js",[],["153","154"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/ErrorScreen.js",[],["155","156"],"/home/shkri/Documents/GDMSH/cj-apollo/src/index.js",[],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/DataPageView.js",["157","158","159","160","161"],"/home/shkri/Documents/GDMSH/cj-apollo/src/components/DataPageApollo.js",["162"],"import { FETCH_FULL_INFO } from \"../scripts/queries\";\nimport { NetworkStatus, useMutation, useQuery } from \"@apollo/client\";\nimport DataPageView from \"./DataPageView.js\";\nimport {\n  CREATE_COURSE_MUTATION,\n  CREATE_STUDENT_MUTATION,\n  CREATE_TEACHER_MUTATION,\n  DELETE_COURSE_MUTATION,\n  DELETE_STUDENT_MUTATION,\n  DELETE_TEACHER_MUTATION,\n  UPDATE_COURSE_MUTATION,\n  UPDATE_STUDENT_MUTATION,\n  UPDATE_TEACHER_MUTATION,\n} from \"../scripts/mutations\";\n\nexport default function DataPageController(props) {\n  var { loading, data, error, refetch, networkStatus } = useQuery(\n    FETCH_FULL_INFO,\n    {\n      notifyOnNetworkStatusChange: true,\n      fetchPolicy: \"network-only\",\n    }\n  );\n\n  const [updateTeacher] = useMutation(UPDATE_TEACHER_MUTATION);\n  const [updateCourse] = useMutation(UPDATE_COURSE_MUTATION);\n  const [updateStudent] = useMutation(UPDATE_STUDENT_MUTATION);\n\n  const [createTeacher] = useMutation(CREATE_TEACHER_MUTATION);\n  const [createCourse] = useMutation(CREATE_COURSE_MUTATION);\n  const [createStudent] = useMutation(CREATE_STUDENT_MUTATION);\n\n  const [deleteTeacher] = useMutation(DELETE_TEACHER_MUTATION);\n  const [deleteCourse] = useMutation(DELETE_COURSE_MUTATION);\n  const [deleteStudent] = useMutation(DELETE_STUDENT_MUTATION);\n\n  const spinner = <div>Загрузка</div>;\n\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n\n  let { teachers, courses, students, relations } = data.fetchFullInfo;\n\n  relations = relations.map((el) => ({\n    teacher: el.teacher.id,\n    course: el.course.id,\n    student: el.student.id,\n  }));\n\n  return (\n    <DataPageView\n      teachers={teachers}\n      courses={courses}\n      students={students}\n      relations={relations}\n      updateTeacher={updateTeacher}\n      updateCourse={updateCourse}\n      updateStudent={updateStudent}\n      createTeacher={createTeacher}\n      createCourse={createCourse}\n      createStudent={createStudent}\n      deleteTeacher={deleteTeacher}\n      deleteCourse={deleteCourse}\n      deleteStudent={deleteStudent}\n      refetch={refetch}\n    />\n  );\n}\n",{"ruleId":"163","severity":1,"message":"164","line":15,"column":3,"nodeType":"165","messageId":"166","endLine":15,"endColumn":18},{"ruleId":"163","severity":1,"message":"167","line":28,"column":10,"nodeType":"165","messageId":"166","endLine":28,"endColumn":16},{"ruleId":"168","severity":1,"message":"169","line":357,"column":9,"nodeType":"165","messageId":"170","endLine":357,"endColumn":16},{"ruleId":"168","severity":1,"message":"171","line":361,"column":14,"nodeType":"165","messageId":"170","endLine":361,"endColumn":15},{"ruleId":"168","severity":1,"message":"172","line":362,"column":11,"nodeType":"165","messageId":"170","endLine":362,"endColumn":17},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"163","severity":1,"message":"177","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":28},{"ruleId":"163","severity":1,"message":"178","line":39,"column":10,"nodeType":"165","messageId":"166","endLine":39,"endColumn":17},{"ruleId":"163","severity":1,"message":"179","line":39,"column":19,"nodeType":"165","messageId":"166","endLine":39,"endColumn":29},{"ruleId":"173","replacedBy":"180"},{"ruleId":"175","replacedBy":"181"},{"ruleId":"163","severity":1,"message":"182","line":22,"column":24,"nodeType":"165","messageId":"166","endLine":22,"endColumn":29},{"ruleId":"163","severity":1,"message":"183","line":3,"column":19,"nodeType":"165","messageId":"166","endLine":3,"endColumn":29},{"ruleId":"163","severity":1,"message":"184","line":42,"column":9,"nodeType":"165","messageId":"166","endLine":42,"endColumn":16},{"ruleId":"163","severity":1,"message":"185","line":47,"column":9,"nodeType":"165","messageId":"166","endLine":47,"endColumn":18},{"ruleId":"173","replacedBy":"186"},{"ruleId":"175","replacedBy":"187"},{"ruleId":"163","severity":1,"message":"188","line":1,"column":29,"nodeType":"165","messageId":"166","endLine":1,"endColumn":38},{"ruleId":"163","severity":1,"message":"189","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":23},{"ruleId":"173","replacedBy":"190"},{"ruleId":"175","replacedBy":"191"},{"ruleId":"163","severity":1,"message":"188","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":26},{"ruleId":"163","severity":1,"message":"182","line":72,"column":37,"nodeType":"165","messageId":"166","endLine":72,"endColumn":42},{"ruleId":"163","severity":1,"message":"192","line":72,"column":44,"nodeType":"165","messageId":"166","endLine":72,"endColumn":51},{"ruleId":"163","severity":1,"message":"193","line":72,"column":53,"nodeType":"165","messageId":"166","endLine":72,"endColumn":66},{"ruleId":"163","severity":1,"message":"194","line":1,"column":8,"nodeType":"165","messageId":"166","endLine":1,"endColumn":13},{"ruleId":"163","severity":1,"message":"183","line":2,"column":19,"nodeType":"165","messageId":"166","endLine":2,"endColumn":29},{"ruleId":"163","severity":1,"message":"184","line":37,"column":9,"nodeType":"165","messageId":"166","endLine":37,"endColumn":16},{"ruleId":"163","severity":1,"message":"185","line":43,"column":9,"nodeType":"165","messageId":"166","endLine":43,"endColumn":18},{"ruleId":"163","severity":1,"message":"182","line":74,"column":26,"nodeType":"165","messageId":"166","endLine":74,"endColumn":31},{"ruleId":"173","replacedBy":"195"},{"ruleId":"175","replacedBy":"196"},{"ruleId":"173","replacedBy":"197"},{"ruleId":"175","replacedBy":"198"},{"ruleId":"163","severity":1,"message":"199","line":7,"column":10,"nodeType":"165","messageId":"166","endLine":7,"endColumn":22},{"ruleId":"163","severity":1,"message":"182","line":18,"column":24,"nodeType":"165","messageId":"166","endLine":18,"endColumn":29},{"ruleId":"163","severity":1,"message":"200","line":90,"column":9,"nodeType":"165","messageId":"166","endLine":90,"endColumn":13},{"ruleId":"173","replacedBy":"201"},{"ruleId":"175","replacedBy":"202"},{"ruleId":"173","replacedBy":"203"},{"ruleId":"175","replacedBy":"204"},{"ruleId":"163","severity":1,"message":"205","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":23},{"ruleId":"163","severity":1,"message":"206","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":18},{"ruleId":"163","severity":1,"message":"207","line":27,"column":25,"nodeType":"165","messageId":"166","endLine":27,"endColumn":41},{"ruleId":"163","severity":1,"message":"208","line":30,"column":10,"nodeType":"165","messageId":"166","endLine":30,"endColumn":23},{"ruleId":"163","severity":1,"message":"209","line":31,"column":10,"nodeType":"165","messageId":"166","endLine":31,"endColumn":24},{"ruleId":"163","severity":1,"message":"182","line":17,"column":24,"nodeType":"165","messageId":"166","endLine":17,"endColumn":29},"no-unused-vars","'useApolloClient' is defined but never used.","Identifier","unusedVar","'Prompt' is defined but never used.","no-redeclare","'counter' is already defined.","redeclared","'i' is already defined.","'border' is already defined.","no-native-reassign",["210"],"no-negated-in-lhs",["211"],"'useCallback' is defined but never used.","'changed' is assigned a value but never used.","'setChanged' is assigned a value but never used.",["210"],["211"],"'error' is assigned a value but never used.","'QUATERS_RU' is defined but never used.","'getYear' is assigned a value but never used.","'getPeriod' is assigned a value but never used.",["210"],["211"],"'useEffect' is defined but never used.","'GROUP_PERIODS' is defined but never used.",["210"],["211"],"'refetch' is assigned a value but never used.","'networkStatus' is assigned a value but never used.","'React' is defined but never used.",["210"],["211"],["210"],["211"],"'EditableCell' is defined but never used.","'flag' is assigned a value but never used.",["210"],["211"],["210"],["211"],"'useRef' is defined but never used.","'PROGRAMS' is defined but never used.","'setCurrentCourse' is assigned a value but never used.","'activeCourses' is assigned a value but never used.","'activeStudents' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]