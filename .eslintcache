[{"/home/shkri/Documents/cj_apollo/src/index.js":"1","/home/shkri/Documents/cj_apollo/src/scripts/use-auth.js":"2","/home/shkri/Documents/cj_apollo/src/reportWebVitals.js":"3","/home/shkri/Documents/cj_apollo/src/scripts/constants.js":"4","/home/shkri/Documents/cj_apollo/src/Pages/App.js":"5","/home/shkri/Documents/cj_apollo/src/Pages/Header.js":"6","/home/shkri/Documents/cj_apollo/src/Pages/Login.js":"7","/home/shkri/Documents/cj_apollo/src/Pages/ErrorScreen.js":"8","/home/shkri/Documents/cj_apollo/src/Pages/Menu.js":"9","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/CompensationPage/Compensation.js":"10","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/ConsultController.js":"11","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/NotesPage/Notes.js":"12","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/SubgroupsPage/Subgroups.js":"13","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/ReportsPage/Reports.js":"14","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/DataPageApollo.js":"15","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/Journal.js":"16","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/JournalsPage/Journals.js":"17","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/DataPageView.js":"18","/home/shkri/Documents/cj_apollo/src/scripts/utils.js":"19","/home/shkri/Documents/cj_apollo/src/scripts/mutations.js":"20","/home/shkri/Documents/cj_apollo/src/scripts/queries.js":"21","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/IndividualConsultsView.js":"22","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/GroupConsultsView.js":"23","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/IndividualJournalView.js":"24","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/GroupJournalView.js":"25","/home/shkri/Documents/cj_apollo/src/components/EditableDateCell.js":"26","/home/shkri/Documents/cj_apollo/src/components/Controls.js":"27","/home/shkri/Documents/cj_apollo/src/components/TableControls.js":"28","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/GroupCompanyPage/GroupCompanyView.js":"29","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/FilePicker.js":"30","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/ModalContent.js":"31","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/dataPageHeplers.js":"32","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/HourDateCell.js":"33","/home/shkri/Documents/cj_apollo/src/components/EditableCell.js":"34","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/JournalPageHelpers.js":"35","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/GroupCompanyPage/EditableCellHours.js":"36"},{"size":1452,"mtime":1635509121044,"results":"37","hashOfConfig":"38"},{"size":1107,"mtime":1631043538339,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":1630836586243,"results":"40","hashOfConfig":"38"},{"size":2884,"mtime":1635507189932,"results":"41","hashOfConfig":"38"},{"size":3503,"mtime":1635507189896,"results":"42","hashOfConfig":"38"},{"size":1012,"mtime":1630836586243,"results":"43","hashOfConfig":"38"},{"size":2156,"mtime":1630868272806,"results":"44","hashOfConfig":"38"},{"size":649,"mtime":1630836586243,"results":"45","hashOfConfig":"38"},{"size":1180,"mtime":1635507189896,"results":"46","hashOfConfig":"38"},{"size":6062,"mtime":1630836586243,"results":"47","hashOfConfig":"38"},{"size":8441,"mtime":1631043508962,"results":"48","hashOfConfig":"38"},{"size":3536,"mtime":1630836586243,"results":"49","hashOfConfig":"38"},{"size":3864,"mtime":1630836586243,"results":"50","hashOfConfig":"38"},{"size":110,"mtime":1630836586243,"results":"51","hashOfConfig":"38"},{"size":5418,"mtime":1630836586243,"results":"52","hashOfConfig":"38"},{"size":14726,"mtime":1635507189924,"results":"53","hashOfConfig":"38"},{"size":10772,"mtime":1635507189896,"results":"54","hashOfConfig":"38"},{"size":16880,"mtime":1635507189876,"results":"55","hashOfConfig":"38"},{"size":1747,"mtime":1635507189936,"results":"56","hashOfConfig":"38"},{"size":4298,"mtime":1635507189936,"results":"57","hashOfConfig":"38"},{"size":3787,"mtime":1635507189936,"results":"58","hashOfConfig":"38"},{"size":1541,"mtime":1630836586243,"results":"59","hashOfConfig":"38"},{"size":1575,"mtime":1630836586243,"results":"60","hashOfConfig":"38"},{"size":3688,"mtime":1635507189912,"results":"61","hashOfConfig":"38"},{"size":5140,"mtime":1635507189904,"results":"62","hashOfConfig":"38"},{"size":1786,"mtime":1635507189924,"results":"63","hashOfConfig":"38"},{"size":3820,"mtime":1630836586243,"results":"64","hashOfConfig":"38"},{"size":3449,"mtime":1635507189932,"results":"65","hashOfConfig":"38"},{"size":2706,"mtime":1631043513634,"results":"66","hashOfConfig":"38"},{"size":1207,"mtime":1631043498074,"results":"67","hashOfConfig":"38"},{"size":5124,"mtime":1635507189876,"results":"68","hashOfConfig":"38"},{"size":1036,"mtime":1635507189896,"results":"69","hashOfConfig":"38"},{"size":1210,"mtime":1630836586243,"results":"70","hashOfConfig":"38"},{"size":2926,"mtime":1630836586243,"results":"71","hashOfConfig":"38"},{"size":302,"mtime":1635507189924,"results":"72","hashOfConfig":"38"},{"size":2268,"mtime":1630840223606,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bppphb",{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"/home/shkri/Documents/cj_apollo/src/index.js",[],"/home/shkri/Documents/cj_apollo/src/scripts/use-auth.js",[],["150","151"],"/home/shkri/Documents/cj_apollo/src/reportWebVitals.js",[],"/home/shkri/Documents/cj_apollo/src/scripts/constants.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/App.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/Header.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/Login.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/ErrorScreen.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/Menu.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/CompensationPage/Compensation.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/ConsultController.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/NotesPage/Notes.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/SubgroupsPage/Subgroups.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/ReportsPage/Reports.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/DataPageApollo.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/Journal.js",["152"],"import React, { useEffect, useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport moment from \"moment\";\nimport \"moment/locale/ru\";\nimport TableControls from \"../../../components/TableControls\";\nimport IndividualJournalView from \"./IndividualJournalView\";\nimport GroupJournalView from \"./GroupJournalView\";\nimport { useMutation, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { FETCH_JOURNAL_QUERY } from \"../../../scripts/queries\";\nimport { useAuth } from \"../../../scripts/use-auth\";\nimport { UPDATE_JOURNAL_MUTATION } from \"../../../scripts/mutations\";\nimport { GROUP_PERIODS } from \"../../../scripts/constants\";\nimport { getYear } from \"../../../scripts/utils\";\nimport GroupCompanyView from \"../GroupCompanyPage/GroupCompanyView\";\nexport default function Journal(props) {\n  moment.locale(\"ru\");\n\n  let auth = useAuth();\n\n  const [month, setMonth] = React.useState(\n    !![5, 6, 7].find((item) => item === moment().month()) ? 4 : moment().month()\n  );\n  const [course, setCourse] = useState(0);\n  let changed = false;\n\n  const [period, setPeriod] = useState(\n    month > 8 ? GROUP_PERIODS[\"first_half\"] : GROUP_PERIODS[\"second_half\"]\n  );\n\n  const userCourses = props.location.state?.courses || auth.user?.courses;\n  const listener = (event) => {\n    if (changed) {\n      event.preventDefault();\n      let confirm = window.confirm(\n        \"Вы действительно хотите покинуть страницу? Все несохраненные изменения будут потеряны.\"\n      );\n      if (!confirm) event.stopImmediatePropagation();\n    }\n  };\n\n  useEffect(() => {\n    props.menuRef?.current.addEventListener(\"click\", listener);\n\n    return () => {\n      props.menuRef?.current?.removeEventListener(\"click\", listener);\n    };\n  });\n\n  const startDate = moment().month(month).year(getYear(month));\n\n  const parsedDates = createDates(startDate);\n\n  const updateMyData = (row, column, value, group) => {\n    let date = \"\";\n    if (group > -1) {\n      date = dates_by_group[group][column].date;\n      if (date === \"\") {\n        alert(\"Пожалуйста, заполните дату\");\n        return false;\n      }\n    } else {\n      date = parsedDates[column].format(\"YYYY-MM-DD\");\n    }\n    const student = studentData.find((item) => item.student.id === row);\n    const marks = student.journalEntry;\n    const cell = marks.find((el) => el.date.split(\"T\")[0] === date);\n\n    const studentId = studentData.indexOf(student);\n\n    if (cell === undefined) {\n      studentData = [\n        ...studentData.slice(0, studentId),\n        {\n          ...studentData[studentId],\n          journalEntry: [\n            ...studentData[studentId].journalEntry,\n            {\n              id: 0,\n              mark: value,\n              date: date.includes(\"T00:00:00.000Z\")\n                ? date\n                : date.concat(\"T00:00:00.000Z\"),\n              delete_flag: false,\n              update_flag: true,\n            },\n          ],\n        },\n        ...studentData.slice(studentId + 1),\n      ];\n    } else {\n      let index = marks.indexOf(cell);\n      let flag = value === \"\";\n      studentData = [\n        ...studentData.slice(0, studentId),\n        {\n          ...studentData[studentId],\n          journalEntry: [\n            ...studentData[studentId].journalEntry.slice(0, index),\n            {\n              ...studentData[studentId].journalEntry[index],\n              mark: value,\n              delete_flag: flag,\n              update_flag: !flag,\n            },\n            ...studentData[studentId].journalEntry.slice(index + 1),\n          ],\n        },\n        ...studentData.slice(studentId + 1),\n      ];\n    }\n    changed = true;\n    return true;\n  };\n\n  const updateQuaterData = (row, column, value, group) => {\n    const student = studentData.find((item, index) => item.student.id === row);\n    const studentIndex = studentData.indexOf(student);\n    var mark = student.quaterMark.find((item) => item.period === column);\n    if (!mark) {\n      const newMark = {\n        id: 0,\n        mark: value,\n        period: column,\n        studentId: student.id,\n        teacherId: props.location.state.teacher || auth.user.teacher,\n        courseId:\n          props.location.state.courses[course].id ||\n          auth.user.courses[course].id,\n        update_flag: true,\n      };\n      studentData[studentIndex].quaterMark = [\n        ...studentData[studentIndex].quaterMark,\n        newMark,\n      ];\n      return true;\n    }\n    const markIndex = student.quaterMark.indexOf(mark);\n    let flag = value === \"\";\n    studentData = [\n      ...studentData.slice(0, studentIndex),\n      {\n        ...studentData[studentIndex],\n        quaterMark: [\n          ...studentData[studentIndex].quaterMark.slice(0, markIndex),\n          {\n            ...studentData[studentIndex].quaterMark[markIndex],\n            mark: value,\n            delete_flag: flag,\n            update_flag: !flag,\n          },\n          ...studentData[studentIndex].quaterMark.slice(markIndex + 1),\n        ],\n      },\n      ...studentData.slice(studentIndex + 1),\n    ];\n    return true;\n  };\n\n  const createUpdateData = () => {\n    let result = [];\n\n    for (let i = 0; i < studentData.length; i++) {\n      let student = studentData[i].journalEntry;\n      for (let j = 0; j < student.length; j++) {\n        let entry = student[j];\n        if (entry.update_flag)\n          result.push({\n            id: entry.id,\n            mark: entry.mark,\n            date: entry.date,\n            relationId: studentData[i].id,\n          });\n      }\n    }\n\n    return result;\n  };\n\n  const createClearData = () => {\n    let result = [];\n    for (let i = 0; i < studentData.length; i++) {\n      let student = studentData[i].journalEntry;\n      for (let j = 0; j < student.length; j++) {\n        let entry = student[j];\n        if (entry.delete_flag && entry.id !== 0) result.push(entry.id);\n      }\n    }\n    return result;\n  };\n\n  const createQuaterData = () => {\n    let result = [];\n    studentData.forEach((student) => {\n      student.quaterMark.forEach((mark) => {\n        if (mark.update_flag)\n          result.push({\n            id: mark.id,\n            mark: mark.mark,\n            period: mark.period,\n            relationId: student.id,\n          });\n      });\n    });\n    return result;\n  };\n\n  const createQuaterClearData = () => {\n    let result = [];\n    studentData.forEach((student) => {\n      student.quaterMark.forEach((mark) => {\n        if (mark.delete_flag && mark.id !== 0) result.push(mark.id);\n      });\n    });\n    return result;\n  };\n\n  let {\n    loading,\n    data: studentData,\n    error,\n    refetch,\n    networkStatus,\n  } = useQuery(FETCH_JOURNAL_QUERY, {\n    variables: {\n      teacherId: props.location.state?.teacher || auth.user?.teacher,\n      courseId: userCourses[course].id,\n      year: moment().month() > 7 ? moment().year() : moment().year() - 1,\n    },\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n  });\n\n  const [update] = useMutation(UPDATE_JOURNAL_MUTATION);\n\n  const save = async () => {\n    await update({\n      variables: {\n        data: {\n          updateCasual: createUpdateData(),\n          updatePeriod: createQuaterData(),\n          deleteCasual: createClearData(),\n          deletePeriod: createQuaterClearData(),\n        },\n      },\n    });\n\n    refetch();\n  };\n\n  const spinner = <div>Загрузка</div>;\n\n  if (error) throw new Error(503);\n  if (loading) return spinner;\n  if (networkStatus === NetworkStatus.refetch) return spinner;\n  studentData = studentData.fetchJournal.map((student) => ({\n    ...student,\n    journalEntry: [\n      ...student.journalEntry.map((entry) => ({\n        ...entry,\n        delete_flag: false,\n        update_flag: false,\n      })),\n    ],\n  }));\n\n  if (studentData[0].student === null) {\n    return <p>Здесь пока нет данных</p>;\n  }\n  let groupedData = [];\n\n  //TODO replace with map\n  if (userCourses[course].group) {\n    let pairs = [];\n    let classes = [];\n    let programs = [];\n    let subgroups = [];\n    studentData.forEach((item) => {\n      classes.push(item.student.class);\n      programs.push(item.student.program);\n      subgroups.push(item.subgroup);\n    });\n\n    classes = [...new Set(classes)];\n    programs = [...new Set(programs)];\n    subgroups = [...new Set(subgroups)];\n\n    classes.forEach((num) => {\n      programs.forEach((program) => {\n        subgroups.forEach((subgroup) => {\n          pairs.push({\n            class: num,\n            program: program,\n            subgroup: subgroup,\n            students: [],\n          });\n        });\n      });\n    });\n\n    studentData.forEach((item) => {\n      let pairIndex = pairs.findIndex(\n        (pair) =>\n          item.student.class === pair.class &&\n          item.student.program === pair.program &&\n          item.subgroup === (pair.subgroup || null)\n      );\n      pairs[pairIndex].students.push(item);\n    });\n\n    pairs.forEach((pair) => {\n      if (pair.students.length > 0) groupedData.push(pair);\n    });\n    groupedData.sort((a, b) => {\n      if (a.class < b.class) return -1;\n      if (a.class > b.class) return 1;\n      return 0;\n    });\n  }\n\n  //inside groupedData we divide them by subgroups\n\n  //iterate over all dates, grouped by class, program and subgroup\n  // dates are stored in UTC strings (DD-MM-YYYYTHH:MM:SS.sssZ)\n\n  let dates_by_group = groupedData.map((group) => {\n    let month_id = period.data[0].id; //month index. currently is index of first month in PERIOD constatnt, supplied from state.\n    let dates = group.students.map(\n      (student) => student.journalEntry.map((entry) => entry.date) // extrude all available dates from student data\n    );\n    let result = [];\n    const len = period.id === 0 ? 21 : 25; // depending on current half of the year, 20 or 24 cells should be supplied\n    if (dates[0].length === 0) {\n      // if there are no dates supplied for current group, we fill them with empty values\n      let counter = 1; //counter counts for passed cells, separating months from each other\n      for (let i = 1; i < len; i++) {\n        let border = month_id === 1 ? 4 : 5; // border differs, because in january we have only 4 cells\n        if (counter >= border) {\n          // if we are in the next month, reset the counter\n          counter = 1;\n          result.push({ date: \"\", month: month_id });\n          month_id++;\n          continue;\n        }\n        result.push({ date: \"\", month: month_id });\n        counter++;\n      }\n      return result;\n    }\n\n    dates = [...new Set(dates.flat())].values(); // date are 2d array in the beggining. All students in one group attend the same lessons, so we need only unique values.\n    let counter = 1;\n\n    let date = dates.next().value; // pick first date from set\n    let month = parseInt(date.split(\"T\")[0].split(\"-\")[1]); // extrude month from the date\n    for (let i = 1; i < len; i++) {\n      let border = month_id === 1 ? 4 : 5;\n      if (counter < border && month === month_id) {\n        result.push({ date: date, month: month_id });\n        date = dates.next().value;\n        if (!date) {\n          month = 0;\n          continue;\n        }\n        month = parseInt(date.split(\"T\")[0].split(\"-\")[1]);\n        counter++;\n        continue;\n      }\n      if (counter < border && month !== month_id) {\n        counter++;\n        result.push({ date: \"\", month: month_id });\n        continue;\n      }\n      if (counter >= border && month !== month_id) {\n        counter = 1;\n        result.push({ date: \"\", month: month_id });\n        month_id++;\n        continue;\n      }\n      if (counter >= border) {\n        counter = 1;\n        result.push({ date: date, month: month_id });\n        date = dates.next().value;\n        if (!date) {\n          month = 0;\n          continue;\n        }\n        month = parseInt(date.split(\"T\")[0].split(\"-\")[1]);\n        month_id++;\n      }\n    }\n    return result;\n  });\n\n  const updateDates = ({ date, column, group }) => {\n    date = date.toLocaleDateString(\"ru-RU\");\n    date = date.split(\".\");\n    date = `${date[2]}-${date[1]}-${date[0]}`.concat(\"T00:00:00.000Z\");\n\n    const oldDate = dates_by_group[group][column].date;\n\n    let students = groupedData[group].students.map((item) => item.id); //all group student ids\n\n    students = students.filter((student) =>\n      studentData\n        .find((item) => item.id === student)\n        ?.journalEntry.find((mark) => mark.date === oldDate)\n    );\n\n    students.forEach((studentIndex) => {\n      const student = studentData.find((item) => item.id === studentIndex);\n      const marks = student.journalEntry;\n      const cell = marks.find((el) => el.date === oldDate);\n\n      const studentId = studentData.indexOf(student);\n      let index = marks.indexOf(cell);\n\n      if (!cell.delete_flag) {\n        studentData = [\n          ...studentData.slice(0, studentId),\n          {\n            ...studentData[studentId],\n            journalEntry: [\n              ...studentData[studentId].journalEntry.slice(0, index),\n              {\n                ...studentData[studentId].journalEntry[index],\n                date: date,\n                update_flag: true,\n              },\n              ...studentData[studentId].journalEntry.slice(index + 1),\n            ],\n          },\n          ...studentData.slice(studentId + 1),\n        ];\n      }\n    });\n\n    dates_by_group[group][column].date = date;\n  };\n\n  return (\n    <>\n      <TableControls\n        initialMonth={startDate.month()}\n        setMonth={setMonth}\n        save={save}\n        courses={userCourses}\n        course={course}\n        setCourse={setCourse}\n        setPeriod={userCourses[course].group ? setPeriod : undefined}\n        period={userCourses[course].group ? period : undefined}\n        refetch={() => refetch()}\n      />\n      {userCourses[course].group ? (\n        <GroupJournalView\n          dates_by_group={dates_by_group}\n          groupedData={groupedData}\n          period={period}\n          updateDates={updateDates}\n          updateMyData={updateMyData}\n          updateQuaterData={updateQuaterData}\n        />\n      ) : (\n        <IndividualJournalView\n          parsedDates={parsedDates}\n          month={month}\n          updateQuaterData={updateQuaterData}\n          updateMyData={updateMyData}\n          studentData={studentData}\n          onlyHours={userCourses[course].onlyHours}\n        />\n      )}\n    </>\n  );\n}\n\nconst createDates = (initialDate) => {\n  let result = [];\n  let start = initialDate.clone().startOf(\"month\");\n  let end = initialDate.clone().endOf(\"month\");\n\n  for (let date = start; date <= end; date.add(1, \"day\")) {\n    if (date.isoWeekday() !== 7) result.push(date.clone());\n  }\n  return result;\n};\n","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/JournalsPage/Journals.js",["153"],"import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport {\n  FETCH_JOURNAL_QUERY,\n  FETCH_TEACHERS_QUERY,\n} from '../../../scripts/queries'\nimport '../../../styles/Journals.css'\nimport moment from 'moment'\nimport {\n  QUATERS,\n  QUATERS_RU,\n  ACADEMIC_YEARS,\n  PERIODS,\n} from '../../../scripts/constants'\nimport { getQuater } from '../../../scripts/utils'\nimport Controls from '../../../components/Controls'\nimport { useHistory } from 'react-router-dom'\n\nconst HEADERS = [\n  'ФИО',\n  'Класс',\n  'Программа',\n  'Кол-во часов',\n  'Пропуски',\n  'По болезни',\n]\n\nexport default function Teachers(props) {\n  let history = useHistory()\n\n  const [teacherIndex, setTeacherIndex] = useState()\n  const [period, setPeriod] = useState(getQuater(moment().month()))\n  const [year, setYear] = useState(\n    moment().month() > 7 ? moment().year() : moment().year() - 1,\n  )\n  const [course, setCourse] = useState(0)\n\n  const spinner = <div>Загрузка</div>\n\n  const { loading: tcLoading, data: teachers, error } = useQuery(\n    FETCH_TEACHERS_QUERY,\n  )\n\n  if (tcLoading) return spinner\n  if (error) throw new Error(503)\n\n  const ListItem = (props) => {\n    return (\n      <li\n        tabIndex=\"0\"\n        onClick={() => setTeacherIndex(props.index)}\n        className={teacherIndex === props.index ? 'active' : ''}\n      >\n        <p>{props.name}</p>\n      </li>\n    )\n  }\n\n  const extrudeDate = (date) => {\n    const [month, day] = date.split('T')[0].split('-').slice(1)\n    return `${day}.${month}`\n  }\n\n  const StudentItem = (props) => {\n    const cells = Array(props.cells)\n      .fill()\n      .map((x, i) => i)\n    return (\n      <div className=\"teacher_item\">\n        <div className=\"item_header\">\n          <p>{props.name}</p>\n          <p>{props.archived ? '(A)' : ''}</p>\n          <p>{`Выдано уроков: ${props.hours}`}</p>\n        </div>\n        <div className=\"item_data\">\n          <table>\n            <thead>\n              <tr>\n                {cells.map((cell) => (\n                  <th key={cell}>\n                    {props.dates[cell] ? extrudeDate(props.dates[cell]) : '...'}\n                  </th>\n                ))}\n                <th\n                  style={{ width: '10%', whiteSpace: 'nowrap', margin: '10px' }}\n                >\n                  {QUATERS_RU[props.period]}\n                </th>\n                {PERIODS[props.period] !== 'fourth' || (\n                  <th\n                    style={{\n                      width: '5%',\n                      whiteSpace: 'nowrap',\n                      margin: '10px',\n                    }}\n                  >\n                    Год\n                  </th>\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {cells.map((cell) => (\n                  <td\n                    style={{ color: props.archived ? 'gray' : 'black' }}\n                    key={cell}\n                  >\n                    {props.marks[cell] ? props.marks[cell] : ' '}\n                  </td>\n                ))}\n                <td>\n                  {props.quater.find(\n                    (item) => item.period === PERIODS[props.period],\n                  )?.mark || ''}\n                </td>\n                {PERIODS[props.period] !== 'fourth' || (\n                  <td>\n                    {props.quater.find((item) => item.period === 'year')\n                      ?.mark || ''}\n                  </td>\n                )}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n\n  const TeacherJournal = (props) => {\n    const { loading, data: journal, error, networkStatus } = useQuery(\n      FETCH_JOURNAL_QUERY,\n      {\n        variables: {\n          courseId: props.courseId,\n          teacherId: props.teacherIndex,\n          date_gte: moment()\n            .month(QUATERS[props.period][0])\n            .year(props.period > 1 ? props.year + 1 : props.year)\n            .startOf('month')\n            .utc()\n            .format('YYYY-MM-DDTHH:mm:ss.SSS')\n            .concat('Z'),\n          date_lte: moment()\n            .month(QUATERS[props.period].slice(-1)[0])\n            .year(props.period > 1 ? props.year + 1 : props.year)\n            .endOf('month')\n            .utc()\n            .format('YYYY-MM-DDTHH:mm:ss.SSS')\n            .concat('Z'),\n          year: props.year,\n        },\n        fetchPolicy: 'network-only',\n      },\n    )\n\n    if (props.courseId === 0) {\n      return <p>На данный момент для этого учителя нет данных</p>\n    }\n\n    if (loading) return spinner\n    if (networkStatus === networkStatus.refetch) return spinner\n\n    if (error) throw new Error(503)\n\n    if (journal.fetchJournal[0].student === null) {\n      return <p>Для данного предмета еще не назначены ученики</p>\n    }\n\n    return journal.fetchJournal.map((item) => {\n      const name = `${item.student.surname} ${item.student.name}`\n      const hours = `${item.hours}`\n      const dates = item.journalEntry.map((entry) => entry.date)\n      const marks = item.journalEntry.map((entry) => entry.mark)\n      const quater = item.quaterMark\n      return (\n        <StudentItem\n          name={name}\n          hours={hours}\n          dates={dates}\n          marks={marks}\n          cells={15}\n          quater={quater}\n          key={name}\n          period={props.period}\n          archived={item.archived}\n        />\n      )\n    })\n  }\n\n  const getYearValue = (e) => {\n    setYear(ACADEMIC_YEARS[e.target.getAttribute('data-index')].value)\n  }\n\n  const getPeriod = (e) => {\n    setPeriod(e.target.getAttribute('data-index'))\n  }\n\n  const getCourse = (e) => {\n    setCourse(e.target.getAttribute('data-index'))\n  }\n\n  const items = [\n    {\n      type: 'dropdown',\n      data: ACADEMIC_YEARS.map((item) => item.displayName),\n      label: 'Год :',\n      text: ACADEMIC_YEARS.find((item) => item.value === year).displayName,\n      onClick: getYearValue,\n    },\n    {\n      type: 'dropdown',\n      data: QUATERS_RU,\n      label: 'Период :',\n      text: QUATERS_RU[period],\n      onClick: getPeriod,\n    },\n    {\n      type: 'dropdown',\n      data: teachers?.fetchTeachers\n        ?.find((teacher) => teacher.id === teacherIndex)\n        ?.relations.map((item) => item.course.name),\n      label: 'Предмет :',\n      text: teachers?.fetchTeachers?.find(\n        (teacher) => teacher.id === teacherIndex,\n      )?.relations[course]?.course?.name,\n      onClick: getCourse,\n    },\n    {\n      type: 'button',\n      text: 'Редактировать журнал',\n      onClick: () => {\n        if (\n          teachers.fetchTeachers.find(\n            (teacher) =>\n              teacher.id === (teacherIndex || teachers.fetchTeachers[0].id),\n          ).relations[course]?.course?.id !== undefined\n        )\n          history.push({\n            pathname: '/journal',\n            state: {\n              teacher: teacherIndex || teachers.fetchTeachers[0].id,\n              courses: teachers.fetchTeachers\n                .find(\n                  (teacher) =>\n                    teacher.id ===\n                    (teacherIndex || teachers.fetchTeachers[0].id),\n                )\n                .relations.map((item) => item.course),\n            },\n          })\n      },\n      disabled: course.id === 0,\n    },\n    {\n      type: 'button',\n      text: 'Консультации',\n      onClick: () => {\n        if (\n          teachers.fetchTeachers.find(\n            (teacher) =>\n              teacher.id === (teacherIndex || teachers.fetchTeachers[0].id),\n          ).relations[course]?.course?.id !== undefined\n        )\n          history.push({\n            pathname: '/consult',\n            state: {\n              teacher: teacherIndex || teachers.fetchTeachers[0].id,\n              courses: teachers.fetchTeachers\n                .find(\n                  (teacher) =>\n                    teacher.id ===\n                    (teacherIndex || teachers.fetchTeachers[0].id),\n                )\n                .relations.map((item) => item.course),\n            },\n          })\n      },\n      disabled: course.id === 0,\n    },\n    {\n      type: 'button',\n      text: 'Возмещения',\n      onClick: () => {\n        if (\n          teachers.fetchTeachers.find(\n            (teacher) =>\n              teacher.id === (teacherIndex || teachers.fetchTeachers[0].id),\n          ).relations[course]?.course?.id !== undefined\n        )\n          history.push({\n            pathname: '/compensation',\n            state: {\n              teacher: teacherIndex || teachers.fetchTeachers[0].id,\n              courses: teachers.fetchTeachers\n                .find(\n                  (teacher) =>\n                    teacher.id ===\n                    (teacherIndex || teachers.fetchTeachers[0].id),\n                )\n                .relations.map((item) => item.course),\n            },\n          })\n      },\n      disabled: course.id === 0,\n    },\n    {\n      type: 'button',\n      text: 'Заметки',\n      onClick: () => {\n        if (\n          teachers.fetchTeachers.find(\n            (teacher) =>\n              teacher.id === (teacherIndex || teachers.fetchTeachers[0].id),\n          ).relations[course]?.course?.id !== undefined\n        )\n          history.push({\n            pathname: '/notes',\n            state: {\n              teacher: teacherIndex || teachers.fetchTeachers[0].id,\n              courses: teachers.fetchTeachers\n                .find(\n                  (teacher) =>\n                    teacher.id ===\n                    (teacherIndex || teachers.fetchTeachers[0].id),\n                )\n                .relations.map((item) => item.course),\n            },\n          })\n      },\n      disabled: course.id === 0,\n    },\n  ]\n\n  return (\n    <div className=\"page\">\n      <div className=\"block_left\">\n        <ul>\n          {teachers.fetchTeachers.map((teacher) => (\n            <ListItem\n              name={`${teacher.surname} ${teacher.name} ${\n                teacher?.parent || ''\n              }`}\n              index={teacher.id}\n              key={teacher.id}\n            />\n          ))}\n        </ul>\n      </div>\n      <div className=\"block_right\">\n        <Controls items={items} />\n        <TeacherJournal\n          teacherIndex={teacherIndex || teachers.fetchTeachers[0].id}\n          period={period}\n          year={year}\n          key={teacherIndex}\n          courseId={\n            teachers?.fetchTeachers?.find(\n              (teacher) =>\n                teacher.id === (teacherIndex || teachers.fetchTeachers[0].id),\n            )?.relations[course]?.course?.id || 0\n          }\n        />\n      </div>\n    </div>\n  )\n}\n","/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/DataPageView.js",[],"/home/shkri/Documents/cj_apollo/src/scripts/utils.js",[],"/home/shkri/Documents/cj_apollo/src/scripts/mutations.js",[],"/home/shkri/Documents/cj_apollo/src/scripts/queries.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/IndividualConsultsView.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/GroupConsultsView.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/IndividualJournalView.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/GroupJournalView.js",[],"/home/shkri/Documents/cj_apollo/src/components/EditableDateCell.js",[],"/home/shkri/Documents/cj_apollo/src/components/Controls.js",[],"/home/shkri/Documents/cj_apollo/src/components/TableControls.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/GroupCompanyPage/GroupCompanyView.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/FilePicker.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/ModalContent.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/AdminPages/DataPage/dataPageHeplers.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/ConsultsPage/HourDateCell.js",[],"/home/shkri/Documents/cj_apollo/src/components/EditableCell.js",["154"],"import React from \"react\";\nimport { useOnClickOutside } from \"../scripts/utils\";\nimport \"../styles/Journal.css\";\n\nconst EditableCell = ({\n  value: initialValue,\n  row: index,\n  column: id,\n  weekend = \"\",\n  updateMyData,\n  group = -1,\n  disabled = false,\n  data,\n}) => {\n  const [value, setValue] = React.useState(initialValue);\n  const [dropdownVisible, setDropdownVisibility] = React.useState(false);\n  const [dropdownWidth, setDropdownWidth] = React.useState(0);\n\n  const Dropdown = (visible) => {\n    const onClick = (e) => {\n      let mark = \"\";\n      if (e.target.innerHTML !== \"пусто\") mark = e.target.innerHTML;\n      setValue(mark);\n      setDropdownVisibility(false);\n      if (!updateMyData(index, id, mark, group)) setValue(\"\");\n    };\n    const [inverted, setInverted] = React.useState(false);\n\n    const ref = React.useRef();\n\n    React.useEffect(() => {\n      if (dropdownVisible) {\n        const bounds = ref.current.getBoundingClientRect();\n        if (\n          bounds.bottom >\n          (window.innerHeight || document.documentElement.clientHeight)\n        ) {\n          setInverted(true);\n        }\n      }\n    }, [setInverted, dropdownVisible]);\n\n    return (\n      <div\n        className={`dropdown ${visible ? \"visible\" : \"\"} ${\n          !inverted || \"inverted\"\n        }`}\n        style={{ width: `${dropdownWidth}px` }}\n        ref={ref}\n      >\n        {\n          <ul>\n            {\" \"}\n            <li onClick={onClick}>\n              <p style={{ width: \"100%\" }}>пусто</p>\n            </li>\n            <li>\n              <p onClick={onClick}>.</p>\n              <p onClick={onClick}>2</p>\n            </li>\n            <li>\n              <p onClick={onClick}>3</p>\n              <p onClick={onClick}>4-</p>\n            </li>\n            <li>\n              <p onClick={onClick}>4</p>\n              <p onClick={onClick}>4+</p>\n            </li>\n            <li>\n              <p onClick={onClick}>5-</p>\n              <p onClick={onClick}>5</p>\n            </li>\n            <li>\n              <p onClick={onClick}>5+</p>\n              <p onClick={onClick}>Б</p>\n            </li>\n          </ul>\n        }\n      </div>\n    );\n  };\n\n  const ref = React.useRef();\n\n  useOnClickOutside(ref, () => setDropdownVisibility(false));\n\n  const onClick = () => {\n    if (!dropdownVisible) setDropdownVisibility(true);\n  };\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  React.useEffect(() => {\n    setDropdownWidth(ref?.current?.clientWidth || 0);\n  }, [setDropdownWidth, ref?.current?.clientWidth]);\n\n  React.useEffect(() => {});\n  if (disabled) {\n    return (\n      <td ref={ref}>\n        <p style={{ color: \"gray\", margin: \"0\" }}>{value}</p>\n      </td>\n    );\n  }\n  return (\n    <td onClick={onClick} ref={ref} className={`${weekend}`}>\n      <p className=\"input\">{value}</p>\n      {Dropdown(dropdownVisible)}\n    </td>\n  );\n};\n\nexport default EditableCell;\n","/home/shkri/Documents/cj_apollo/src/Pages/UserPages/JournalPage/JournalPageHelpers.js",[],"/home/shkri/Documents/cj_apollo/src/Pages/UserPages/GroupCompanyPage/EditableCellHours.js",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":14,"column":8,"nodeType":"161","messageId":"162","endLine":14,"endColumn":24},{"ruleId":"159","severity":1,"message":"163","line":19,"column":7,"nodeType":"161","messageId":"162","endLine":19,"endColumn":14},{"ruleId":"164","severity":1,"message":"165","line":41,"column":8,"nodeType":"166","endLine":41,"endColumn":38,"suggestions":"167"},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'GroupCompanyView' is defined but never used.","Identifier","unusedVar","'HEADERS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'dropdownVisible'. Either exclude it or remove the dependency array. Outer scope values like 'dropdownVisible' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["170"],"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},"Update the dependencies array to be: [setInverted]",{"range":"173","text":"174"},[1135,1165],"[setInverted]"]