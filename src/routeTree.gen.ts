/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForbiddenRouteImport } from './routes/forbidden'
import { Route as MainRouteImport } from './routes/_main'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MainUsersRouteImport } from './routes/_main.users'
import { Route as MainTeachersRouteImport } from './routes/_main.teachers'
import { Route as MainSubgroupsRouteImport } from './routes/_main.subgroups'
import { Route as MainStudentsRouteImport } from './routes/_main.students'
import { Route as MainSpecializationsRouteImport } from './routes/_main.specializations'
import { Route as MainReportsRouteImport } from './routes/_main.reports'
import { Route as MainNotesRouteImport } from './routes/_main.notes'
import { Route as MainMidtermExamTypesRouteImport } from './routes/_main.midtermExamTypes'
import { Route as MainMidtermExamRouteImport } from './routes/_main.midtermExam'
import { Route as MainJournalRouteImport } from './routes/_main.journal'
import { Route as MainGroupJournalRouteImport } from './routes/_main.groupJournal'
import { Route as MainGroupConsultRouteImport } from './routes/_main.groupConsult'
import { Route as MainCoursesRouteImport } from './routes/_main.courses'
import { Route as MainConsultRouteImport } from './routes/_main.consult'
import { Route as MainCompensationRouteImport } from './routes/_main.compensation'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForbiddenRoute = ForbiddenRouteImport.update({
  id: '/forbidden',
  path: '/forbidden',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainUsersRoute = MainUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => MainRoute,
} as any)
const MainTeachersRoute = MainTeachersRouteImport.update({
  id: '/teachers',
  path: '/teachers',
  getParentRoute: () => MainRoute,
} as any)
const MainSubgroupsRoute = MainSubgroupsRouteImport.update({
  id: '/subgroups',
  path: '/subgroups',
  getParentRoute: () => MainRoute,
} as any)
const MainStudentsRoute = MainStudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => MainRoute,
} as any)
const MainSpecializationsRoute = MainSpecializationsRouteImport.update({
  id: '/specializations',
  path: '/specializations',
  getParentRoute: () => MainRoute,
} as any)
const MainReportsRoute = MainReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => MainRoute,
} as any)
const MainNotesRoute = MainNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => MainRoute,
} as any)
const MainMidtermExamTypesRoute = MainMidtermExamTypesRouteImport.update({
  id: '/midtermExamTypes',
  path: '/midtermExamTypes',
  getParentRoute: () => MainRoute,
} as any)
const MainMidtermExamRoute = MainMidtermExamRouteImport.update({
  id: '/midtermExam',
  path: '/midtermExam',
  getParentRoute: () => MainRoute,
} as any)
const MainJournalRoute = MainJournalRouteImport.update({
  id: '/journal',
  path: '/journal',
  getParentRoute: () => MainRoute,
} as any)
const MainGroupJournalRoute = MainGroupJournalRouteImport.update({
  id: '/groupJournal',
  path: '/groupJournal',
  getParentRoute: () => MainRoute,
} as any)
const MainGroupConsultRoute = MainGroupConsultRouteImport.update({
  id: '/groupConsult',
  path: '/groupConsult',
  getParentRoute: () => MainRoute,
} as any)
const MainCoursesRoute = MainCoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => MainRoute,
} as any)
const MainConsultRoute = MainConsultRouteImport.update({
  id: '/consult',
  path: '/consult',
  getParentRoute: () => MainRoute,
} as any)
const MainCompensationRoute = MainCompensationRouteImport.update({
  id: '/compensation',
  path: '/compensation',
  getParentRoute: () => MainRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forbidden': typeof ForbiddenRoute
  '/login': typeof LoginRoute
  '/compensation': typeof MainCompensationRoute
  '/consult': typeof MainConsultRoute
  '/courses': typeof MainCoursesRoute
  '/groupConsult': typeof MainGroupConsultRoute
  '/groupJournal': typeof MainGroupJournalRoute
  '/journal': typeof MainJournalRoute
  '/midtermExam': typeof MainMidtermExamRoute
  '/midtermExamTypes': typeof MainMidtermExamTypesRoute
  '/notes': typeof MainNotesRoute
  '/reports': typeof MainReportsRoute
  '/specializations': typeof MainSpecializationsRoute
  '/students': typeof MainStudentsRoute
  '/subgroups': typeof MainSubgroupsRoute
  '/teachers': typeof MainTeachersRoute
  '/users': typeof MainUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forbidden': typeof ForbiddenRoute
  '/login': typeof LoginRoute
  '/compensation': typeof MainCompensationRoute
  '/consult': typeof MainConsultRoute
  '/courses': typeof MainCoursesRoute
  '/groupConsult': typeof MainGroupConsultRoute
  '/groupJournal': typeof MainGroupJournalRoute
  '/journal': typeof MainJournalRoute
  '/midtermExam': typeof MainMidtermExamRoute
  '/midtermExamTypes': typeof MainMidtermExamTypesRoute
  '/notes': typeof MainNotesRoute
  '/reports': typeof MainReportsRoute
  '/specializations': typeof MainSpecializationsRoute
  '/students': typeof MainStudentsRoute
  '/subgroups': typeof MainSubgroupsRoute
  '/teachers': typeof MainTeachersRoute
  '/users': typeof MainUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_main': typeof MainRouteWithChildren
  '/forbidden': typeof ForbiddenRoute
  '/login': typeof LoginRoute
  '/_main/compensation': typeof MainCompensationRoute
  '/_main/consult': typeof MainConsultRoute
  '/_main/courses': typeof MainCoursesRoute
  '/_main/groupConsult': typeof MainGroupConsultRoute
  '/_main/groupJournal': typeof MainGroupJournalRoute
  '/_main/journal': typeof MainJournalRoute
  '/_main/midtermExam': typeof MainMidtermExamRoute
  '/_main/midtermExamTypes': typeof MainMidtermExamTypesRoute
  '/_main/notes': typeof MainNotesRoute
  '/_main/reports': typeof MainReportsRoute
  '/_main/specializations': typeof MainSpecializationsRoute
  '/_main/students': typeof MainStudentsRoute
  '/_main/subgroups': typeof MainSubgroupsRoute
  '/_main/teachers': typeof MainTeachersRoute
  '/_main/users': typeof MainUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forbidden'
    | '/login'
    | '/compensation'
    | '/consult'
    | '/courses'
    | '/groupConsult'
    | '/groupJournal'
    | '/journal'
    | '/midtermExam'
    | '/midtermExamTypes'
    | '/notes'
    | '/reports'
    | '/specializations'
    | '/students'
    | '/subgroups'
    | '/teachers'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forbidden'
    | '/login'
    | '/compensation'
    | '/consult'
    | '/courses'
    | '/groupConsult'
    | '/groupJournal'
    | '/journal'
    | '/midtermExam'
    | '/midtermExamTypes'
    | '/notes'
    | '/reports'
    | '/specializations'
    | '/students'
    | '/subgroups'
    | '/teachers'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/forbidden'
    | '/login'
    | '/_main/compensation'
    | '/_main/consult'
    | '/_main/courses'
    | '/_main/groupConsult'
    | '/_main/groupJournal'
    | '/_main/journal'
    | '/_main/midtermExam'
    | '/_main/midtermExamTypes'
    | '/_main/notes'
    | '/_main/reports'
    | '/_main/specializations'
    | '/_main/students'
    | '/_main/subgroups'
    | '/_main/teachers'
    | '/_main/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRouteWithChildren
  ForbiddenRoute: typeof ForbiddenRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forbidden': {
      id: '/forbidden'
      path: '/forbidden'
      fullPath: '/forbidden'
      preLoaderRoute: typeof ForbiddenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/users': {
      id: '/_main/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof MainUsersRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/teachers': {
      id: '/_main/teachers'
      path: '/teachers'
      fullPath: '/teachers'
      preLoaderRoute: typeof MainTeachersRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/subgroups': {
      id: '/_main/subgroups'
      path: '/subgroups'
      fullPath: '/subgroups'
      preLoaderRoute: typeof MainSubgroupsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/students': {
      id: '/_main/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof MainStudentsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/specializations': {
      id: '/_main/specializations'
      path: '/specializations'
      fullPath: '/specializations'
      preLoaderRoute: typeof MainSpecializationsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/reports': {
      id: '/_main/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof MainReportsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/notes': {
      id: '/_main/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof MainNotesRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/midtermExamTypes': {
      id: '/_main/midtermExamTypes'
      path: '/midtermExamTypes'
      fullPath: '/midtermExamTypes'
      preLoaderRoute: typeof MainMidtermExamTypesRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/midtermExam': {
      id: '/_main/midtermExam'
      path: '/midtermExam'
      fullPath: '/midtermExam'
      preLoaderRoute: typeof MainMidtermExamRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/journal': {
      id: '/_main/journal'
      path: '/journal'
      fullPath: '/journal'
      preLoaderRoute: typeof MainJournalRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/groupJournal': {
      id: '/_main/groupJournal'
      path: '/groupJournal'
      fullPath: '/groupJournal'
      preLoaderRoute: typeof MainGroupJournalRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/groupConsult': {
      id: '/_main/groupConsult'
      path: '/groupConsult'
      fullPath: '/groupConsult'
      preLoaderRoute: typeof MainGroupConsultRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/courses': {
      id: '/_main/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof MainCoursesRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/consult': {
      id: '/_main/consult'
      path: '/consult'
      fullPath: '/consult'
      preLoaderRoute: typeof MainConsultRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/compensation': {
      id: '/_main/compensation'
      path: '/compensation'
      fullPath: '/compensation'
      preLoaderRoute: typeof MainCompensationRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface MainRouteChildren {
  MainCompensationRoute: typeof MainCompensationRoute
  MainConsultRoute: typeof MainConsultRoute
  MainCoursesRoute: typeof MainCoursesRoute
  MainGroupConsultRoute: typeof MainGroupConsultRoute
  MainGroupJournalRoute: typeof MainGroupJournalRoute
  MainJournalRoute: typeof MainJournalRoute
  MainMidtermExamRoute: typeof MainMidtermExamRoute
  MainMidtermExamTypesRoute: typeof MainMidtermExamTypesRoute
  MainNotesRoute: typeof MainNotesRoute
  MainReportsRoute: typeof MainReportsRoute
  MainSpecializationsRoute: typeof MainSpecializationsRoute
  MainStudentsRoute: typeof MainStudentsRoute
  MainSubgroupsRoute: typeof MainSubgroupsRoute
  MainTeachersRoute: typeof MainTeachersRoute
  MainUsersRoute: typeof MainUsersRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainCompensationRoute: MainCompensationRoute,
  MainConsultRoute: MainConsultRoute,
  MainCoursesRoute: MainCoursesRoute,
  MainGroupConsultRoute: MainGroupConsultRoute,
  MainGroupJournalRoute: MainGroupJournalRoute,
  MainJournalRoute: MainJournalRoute,
  MainMidtermExamRoute: MainMidtermExamRoute,
  MainMidtermExamTypesRoute: MainMidtermExamTypesRoute,
  MainNotesRoute: MainNotesRoute,
  MainReportsRoute: MainReportsRoute,
  MainSpecializationsRoute: MainSpecializationsRoute,
  MainStudentsRoute: MainStudentsRoute,
  MainSubgroupsRoute: MainSubgroupsRoute,
  MainTeachersRoute: MainTeachersRoute,
  MainUsersRoute: MainUsersRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRouteWithChildren,
  ForbiddenRoute: ForbiddenRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
